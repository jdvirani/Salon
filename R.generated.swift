//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 color palettes.
  struct color {
    /// This `R.color.salonX` struct is generated, and contains static references to 6 colors.
    struct salonX {
      /// <span style='background-color: #049FCF; color: #FB6030; padding: 1px 3px;'>#049FCF</span> accent
      static let accent = Rswift.ColorResource(name: "accent", red: 0.01568627451, green: 0.6235294118, blue: 0.8117647059, alpha: 1.0)
      /// <span style='background-color: #151518; color: #EAEAE7; padding: 1px 3px;'>#151518</span> tabSelected
      static let tabSelected = Rswift.ColorResource(name: "tabSelected", red: 0.0840345919132233, green: 0.0809220597147942, blue: 0.0949352011084557, alpha: 1.0)
      /// <span style='background-color: #202222; color: #DFDDDD; padding: 1px 3px;'>#202222</span> fontDark
      static let fontDark = Rswift.ColorResource(name: "fontDark", red: 0.126538172364235, green: 0.132443234324455, blue: 0.13231885433197, alpha: 1.0)
      /// <span style='background-color: #264887; color: #D9B778; padding: 1px 3px;'>#264887</span> FB
      static let fB = Rswift.ColorResource(name: "FB", red: 0.148339822888374, green: 0.283240795135498, blue: 0.527807712554932, alpha: 1.0)
      /// <span style='background-color: #343B4599; color: #CBC4BA; padding: 1px 3px;'>#343B4599</span> headerBG
      static let headerBG = Rswift.ColorResource(name: "headerBG", red: 0.2039215686, green: 0.231372549, blue: 0.2705882353, alpha: 0.6000000238)
      /// <span style='background-color: #99999999; color: #666666; padding: 1px 3px;'>#99999999</span> seperator
      static let seperator = Rswift.ColorResource(name: "seperator", red: 0.6, green: 0.6, blue: 0.6, alpha: 0.6000000238)
      
      /// <span style='background-color: #049FCF; color: #FB6030; padding: 1px 3px;'>#049FCF</span> accent
      /// 
      /// UIColor(red: 0.01568627451, green: 0.6235294118, blue: 0.8117647059, alpha: 1.0)
      static func accent(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.01568627451, green: 0.6235294118, blue: 0.8117647059, alpha: 1.0)
      }
      
      /// <span style='background-color: #151518; color: #EAEAE7; padding: 1px 3px;'>#151518</span> tabSelected
      /// 
      /// UIColor(red: 0.0840345919132233, green: 0.0809220597147942, blue: 0.0949352011084557, alpha: 1.0)
      static func tabSelected(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0840345919132233, green: 0.0809220597147942, blue: 0.0949352011084557, alpha: 1.0)
      }
      
      /// <span style='background-color: #202222; color: #DFDDDD; padding: 1px 3px;'>#202222</span> fontDark
      /// 
      /// UIColor(red: 0.126538172364235, green: 0.132443234324455, blue: 0.13231885433197, alpha: 1.0)
      static func fontDark(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.126538172364235, green: 0.132443234324455, blue: 0.13231885433197, alpha: 1.0)
      }
      
      /// <span style='background-color: #264887; color: #D9B778; padding: 1px 3px;'>#264887</span> FB
      /// 
      /// UIColor(red: 0.148339822888374, green: 0.283240795135498, blue: 0.527807712554932, alpha: 1.0)
      static func fB(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.148339822888374, green: 0.283240795135498, blue: 0.527807712554932, alpha: 1.0)
      }
      
      /// <span style='background-color: #343B4599; color: #CBC4BA; padding: 1px 3px;'>#343B4599</span> headerBG
      /// 
      /// UIColor(red: 0.2039215686, green: 0.231372549, blue: 0.2705882353, alpha: 0.6000000238)
      static func headerBG(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2039215686, green: 0.231372549, blue: 0.2705882353, alpha: 0.6000000238)
      }
      
      /// <span style='background-color: #99999999; color: #666666; padding: 1px 3px;'>#99999999</span> seperator
      /// 
      /// UIColor(red: 0.6, green: 0.6, blue: 0.6, alpha: 0.6000000238)
      static func seperator(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.6, green: 0.6, blue: 0.6, alpha: 0.6000000238)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    /// Resource file `KICamera.png`.
    static let kICameraPng = Rswift.FileResource(bundle: R.hostingBundle, name: "KICamera", pathExtension: "png")
    /// Resource file `KICamera@2x.png`.
    static let kICamera2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "KICamera@2x", pathExtension: "png")
    /// Resource file `SalonX.clr`.
    static let salonXClr = Rswift.FileResource(bundle: R.hostingBundle, name: "SalonX", pathExtension: "clr")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "KICamera", withExtension: "png")`
    static func kICameraPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kICameraPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "KICamera@2x", withExtension: "png")`
    static func kICamera2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kICamera2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SalonX", withExtension: "clr")`
    static func salonXClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.salonXClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 125 images.
  struct image {
    /// Image `KICamera`.
    static let kICamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "KICamera")
    /// Image `add_client_photo_placeholder`.
    static let add_client_photo_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_client_photo_placeholder")
    /// Image `bg_login_page`.
    static let bg_login_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_login_page")
    /// Image `bg_message_display`.
    static let bg_message_display = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_message_display")
    /// Image `btn_radio_selected_blue`.
    static let btn_radio_selected_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_radio_selected_blue")
    /// Image `btn_radio_unselected_blue`.
    static let btn_radio_unselected_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_radio_unselected_blue")
    /// Image `checkbox_select_regular`.
    static let checkbox_select_regular = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_select_regular")
    /// Image `checkbox_selected_small`.
    static let checkbox_selected_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected_small")
    /// Image `checkbox_unselect_regular`.
    static let checkbox_unselect_regular = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_unselect_regular")
    /// Image `checkbox_unselected_small`.
    static let checkbox_unselected_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_unselected_small")
    /// Image `ic_add_client`.
    static let ic_add_client = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_client")
    /// Image `ic_agenda_dashboard`.
    static let ic_agenda_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_agenda_dashboard")
    /// Image `ic_agenda_selected`.
    static let ic_agenda_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_agenda_selected")
    /// Image `ic_agenda_unselected`.
    static let ic_agenda_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_agenda_unselected")
    /// Image `ic_arrow_forward_white`.
    static let ic_arrow_forward_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_forward_white")
    /// Image `ic_arrow_forward`.
    static let ic_arrow_forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_forward")
    /// Image `ic_arrow_previous`.
    static let ic_arrow_previous = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_previous")
    /// Image `ic_asthetics_category`.
    static let ic_asthetics_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_asthetics_category")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_calender_blue`.
    static let ic_calender_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_blue")
    /// Image `ic_calender_gray`.
    static let ic_calender_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_gray")
    /// Image `ic_calender_notification_screen`.
    static let ic_calender_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_notification_screen")
    /// Image `ic_calender_red_notification_screen`.
    static let ic_calender_red_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_red_notification_screen")
    /// Image `ic_call_contact_page`.
    static let ic_call_contact_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call_contact_page")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_client_dashboard`.
    static let ic_client_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_client_dashboard")
    /// Image `ic_client_selected`.
    static let ic_client_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_client_selected")
    /// Image `ic_client_unselected`.
    static let ic_client_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_client_unselected")
    /// Image `ic_confirm_appointment_notification_screen`.
    static let ic_confirm_appointment_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_confirm_appointment_notification_screen")
    /// Image `ic_contact_side_menu_selected`.
    static let ic_contact_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_side_menu_selected")
    /// Image `ic_contact_side_menu_unselected`.
    static let ic_contact_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_side_menu_unselected")
    /// Image `ic_delete_red`.
    static let ic_delete_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_red")
    /// Image `ic_delete_utilities`.
    static let ic_delete_utilities = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_utilities")
    /// Image `ic_dropdown_regular`.
    static let ic_dropdown_regular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropdown_regular")
    /// Image `ic_edit_blue`.
    static let ic_edit_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_blue")
    /// Image `ic_edit_employee`.
    static let ic_edit_employee = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_employee")
    /// Image `ic_email_gray`.
    static let ic_email_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_gray")
    /// Image `ic_employee_blue`.
    static let ic_employee_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_employee_blue")
    /// Image `ic_employee_group_agenda_screen`.
    static let ic_employee_group_agenda_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_employee_group_agenda_screen")
    /// Image `ic_employee_small_view`.
    static let ic_employee_small_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_employee_small_view")
    /// Image `ic_favorite_side_menu_selected`.
    static let ic_favorite_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_side_menu_selected")
    /// Image `ic_favorite_side_menu_unselected`.
    static let ic_favorite_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favorite_side_menu_unselected")
    /// Image `ic_fb_edit_salon_details`.
    static let ic_fb_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb_edit_salon_details")
    /// Image `ic_fb_login_page`.
    static let ic_fb_login_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb_login_page")
    /// Image `ic_feedback_notification_screen`.
    static let ic_feedback_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feedback_notification_screen")
    /// Image `ic_filter_header`.
    static let ic_filter_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter_header")
    /// Image `ic_google_plus_edit_salon_details`.
    static let ic_google_plus_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google_plus_edit_salon_details")
    /// Image `ic_hair_category`.
    static let ic_hair_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hair_category")
    /// Image `ic_hair_remove_category`.
    static let ic_hair_remove_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hair_remove_category")
    /// Image `ic_heart_selected`.
    static let ic_heart_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_selected")
    /// Image `ic_heart_unselected`.
    static let ic_heart_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_heart_unselected")
    /// Image `ic_home_selected`.
    static let ic_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_selected")
    /// Image `ic_home_unselected`.
    static let ic_home_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_unselected")
    /// Image `ic_instagram_edit_salon_details`.
    static let ic_instagram_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram_edit_salon_details")
    /// Image `ic_last_minute_offer_side_menu_select`.
    static let ic_last_minute_offer_side_menu_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_last_minute_offer_side_menu_select")
    /// Image `ic_last_minute_offer_side_menu_unselect`.
    static let ic_last_minute_offer_side_menu_unselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_last_minute_offer_side_menu_unselect")
    /// Image `ic_location_contact_page`.
    static let ic_location_contact_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_contact_page")
    /// Image `ic_logout_sidemenu`.
    static let ic_logout_sidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout_sidemenu")
    /// Image `ic_mackup_category`.
    static let ic_mackup_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mackup_category")
    /// Image `ic_manageSalon_selected`.
    static let ic_manageSalon_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_manageSalon_selected")
    /// Image `ic_manageSalon_unselected`.
    static let ic_manageSalon_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_manageSalon_unselected")
    /// Image `ic_massage_category`.
    static let ic_massage_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_massage_category")
    /// Image `ic_menubar_header`.
    static let ic_menubar_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menubar_header")
    /// Image `ic_message_contact_page`.
    static let ic_message_contact_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message_contact_page")
    /// Image `ic_message_request_notification_screen`.
    static let ic_message_request_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message_request_notification_screen")
    /// Image `ic_minus`.
    static let ic_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus")
    /// Image `ic_my_appointment_side_menu_selected`.
    static let ic_my_appointment_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_appointment_side_menu_selected")
    /// Image `ic_my_appointment_side_menu_unselected`.
    static let ic_my_appointment_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_appointment_side_menu_unselected")
    /// Image `ic_my_profile_side_menu_selected`.
    static let ic_my_profile_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_profile_side_menu_selected")
    /// Image `ic_my_profile_side_menu_unselected`.
    static let ic_my_profile_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_profile_side_menu_unselected")
    /// Image `ic_nail_category`.
    static let ic_nail_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nail_category")
    /// Image `ic_notification`.
    static let ic_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification")
    /// Image `ic_payment_dashboard`.
    static let ic_payment_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_payment_dashboard")
    /// Image `ic_phone_dark`.
    static let ic_phone_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone_dark")
    /// Image `ic_pintrest_plus_edit_salon_details`.
    static let ic_pintrest_plus_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pintrest_plus_edit_salon_details")
    /// Image `ic_plus`.
    static let ic_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus")
    /// Image `ic_privacy_policy_side_menu_selected`.
    static let ic_privacy_policy_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_privacy_policy_side_menu_selected")
    /// Image `ic_privacy_policy_side_menu_unselected`.
    static let ic_privacy_policy_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_privacy_policy_side_menu_unselected")
    /// Image `ic_profile_dashboard`.
    static let ic_profile_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_dashboard")
    /// Image `ic_report_dashboard`.
    static let ic_report_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_report_dashboard")
    /// Image `ic_report_selected`.
    static let ic_report_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_report_selected")
    /// Image `ic_report_unselected`.
    static let ic_report_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_report_unselected")
    /// Image `ic_request_notification_screen`.
    static let ic_request_notification_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_request_notification_screen")
    /// Image `ic_search_home_page`.
    static let ic_search_home_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_home_page")
    /// Image `ic_search_individual_home_page`.
    static let ic_search_individual_home_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_individual_home_page")
    /// Image `ic_search_salon_home_page`.
    static let ic_search_salon_home_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_salon_home_page")
    /// Image `ic_search_sidemenu_selected`.
    static let ic_search_sidemenu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_sidemenu_selected")
    /// Image `ic_search_sidemenu_unselected`.
    static let ic_search_sidemenu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_sidemenu_unselected")
    /// Image `ic_setting_dashboard`.
    static let ic_setting_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting_dashboard")
    /// Image `ic_share_header`.
    static let ic_share_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_header")
    /// Image `ic_star_selected_feedback`.
    static let ic_star_selected_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_selected_feedback")
    /// Image `ic_star_unselected_feedback`.
    static let ic_star_unselected_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_unselected_feedback")
    /// Image `ic_term_and_condition_side_menu_selected`.
    static let ic_term_and_condition_side_menu_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_term_and_condition_side_menu_selected")
    /// Image `ic_term_and_condition_side_menu_unselected`.
    static let ic_term_and_condition_side_menu_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_term_and_condition_side_menu_unselected")
    /// Image `ic_twitter_edit_salon_details`.
    static let ic_twitter_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter_edit_salon_details")
    /// Image `ic_user_dark_gray`.
    static let ic_user_dark_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_dark_gray")
    /// Image `ic_website_edit_salon_details`.
    static let ic_website_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_website_edit_salon_details")
    /// Image `ic_whatsapp_edit_salon_details`.
    static let ic_whatsapp_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_whatsapp_edit_salon_details")
    /// Image `ic_youtube_edit_salon_details`.
    static let ic_youtube_edit_salon_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube_edit_salon_details")
    /// Image `icon_color_picker`.
    static let icon_color_picker = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_color_picker")
    /// Image `img_upload_photo`.
    static let img_upload_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_upload_photo")
    /// Image `logo_header`.
    static let logo_header = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_header")
    /// Image `logo_home_screen`.
    static let logo_home_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_home_screen")
    /// Image `logo_login_page`.
    static let logo_login_page = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_login_page")
    /// Image `map_pin_blue`.
    static let map_pin_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_pin_blue")
    /// Image `no_record`.
    static let no_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_record")
    /// Image `placeholder__client`.
    static let placeholder__client = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder__client")
    /// Image `placeholder_employee`.
    static let placeholder_employee = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_employee")
    /// Image `placeholder_listing_salon`.
    static let placeholder_listing_salon = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_listing_salon")
    /// Image `placeholder_main_category`.
    static let placeholder_main_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_main_category")
    /// Image `placeholder_map`.
    static let placeholder_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_map")
    /// Image `placeholder_user`.
    static let placeholder_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_user")
    /// Image `search_box_blue`.
    static let search_box_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_box_blue")
    /// Image `seprator_dotted-1`.
    static let seprator_dotted1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "seprator_dotted-1")
    /// Image `seprator_dotted`.
    static let seprator_dotted = Rswift.ImageResource(bundle: R.hostingBundle, name: "seprator_dotted")
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")
    /// Image `star_big`.
    static let star_big = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_big")
    /// Image `star_selected`.
    static let star_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_selected")
    /// Image `star_small_unselected`.
    static let star_small_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_small_unselected")
    /// Image `star_unselected`.
    static let star_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_unselected")
    /// Image `tab_selected_left`.
    static let tab_selected_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_selected_left")
    /// Image `tab_selected_right`.
    static let tab_selected_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_selected_right")
    /// Image `tab_unselected_left`.
    static let tab_unselected_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_unselected_left")
    /// Image `tab_unselected_right`.
    static let tab_unselected_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_unselected_right")
    /// Image `user_placeholder_side_menu`.
    static let user_placeholder_side_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_placeholder_side_menu")
    
    /// `UIImage(named: "KICamera", bundle: ..., traitCollection: ...)`
    static func kICamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kICamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add_client_photo_placeholder", bundle: ..., traitCollection: ...)`
    static func add_client_photo_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_client_photo_placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_login_page", bundle: ..., traitCollection: ...)`
    static func bg_login_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_login_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_message_display", bundle: ..., traitCollection: ...)`
    static func bg_message_display(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_message_display, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_radio_selected_blue", bundle: ..., traitCollection: ...)`
    static func btn_radio_selected_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_radio_selected_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_radio_unselected_blue", bundle: ..., traitCollection: ...)`
    static func btn_radio_unselected_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_radio_unselected_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_select_regular", bundle: ..., traitCollection: ...)`
    static func checkbox_select_regular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_select_regular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_selected_small", bundle: ..., traitCollection: ...)`
    static func checkbox_selected_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_selected_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_unselect_regular", bundle: ..., traitCollection: ...)`
    static func checkbox_unselect_regular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_unselect_regular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_unselected_small", bundle: ..., traitCollection: ...)`
    static func checkbox_unselected_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_unselected_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_client", bundle: ..., traitCollection: ...)`
    static func ic_add_client(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_client, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_agenda_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_agenda_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_agenda_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_agenda_selected", bundle: ..., traitCollection: ...)`
    static func ic_agenda_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_agenda_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_agenda_unselected", bundle: ..., traitCollection: ...)`
    static func ic_agenda_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_agenda_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_forward", bundle: ..., traitCollection: ...)`
    static func ic_arrow_forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_forward_white", bundle: ..., traitCollection: ...)`
    static func ic_arrow_forward_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_forward_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow_previous", bundle: ..., traitCollection: ...)`
    static func ic_arrow_previous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_previous, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_asthetics_category", bundle: ..., traitCollection: ...)`
    static func ic_asthetics_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_asthetics_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_blue", bundle: ..., traitCollection: ...)`
    static func ic_calender_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_gray", bundle: ..., traitCollection: ...)`
    static func ic_calender_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_calender_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calender_red_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_calender_red_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_red_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_call_contact_page", bundle: ..., traitCollection: ...)`
    static func ic_call_contact_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call_contact_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_client_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_client_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_client_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_client_selected", bundle: ..., traitCollection: ...)`
    static func ic_client_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_client_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_client_unselected", bundle: ..., traitCollection: ...)`
    static func ic_client_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_client_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_confirm_appointment_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_confirm_appointment_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_confirm_appointment_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contact_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_contact_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contact_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_contact_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_red", bundle: ..., traitCollection: ...)`
    static func ic_delete_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_delete_utilities", bundle: ..., traitCollection: ...)`
    static func ic_delete_utilities(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_utilities, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dropdown_regular", bundle: ..., traitCollection: ...)`
    static func ic_dropdown_regular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropdown_regular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit_blue", bundle: ..., traitCollection: ...)`
    static func ic_edit_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit_employee", bundle: ..., traitCollection: ...)`
    static func ic_edit_employee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_employee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email_gray", bundle: ..., traitCollection: ...)`
    static func ic_email_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_employee_blue", bundle: ..., traitCollection: ...)`
    static func ic_employee_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_employee_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_employee_group_agenda_screen", bundle: ..., traitCollection: ...)`
    static func ic_employee_group_agenda_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_employee_group_agenda_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_employee_small_view", bundle: ..., traitCollection: ...)`
    static func ic_employee_small_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_employee_small_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_favorite_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favorite_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_favorite_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favorite_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fb_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_fb_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fb_login_page", bundle: ..., traitCollection: ...)`
    static func ic_fb_login_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb_login_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_feedback_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_feedback_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feedback_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter_header", bundle: ..., traitCollection: ...)`
    static func ic_filter_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google_plus_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_google_plus_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google_plus_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hair_category", bundle: ..., traitCollection: ...)`
    static func ic_hair_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hair_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_hair_remove_category", bundle: ..., traitCollection: ...)`
    static func ic_hair_remove_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_hair_remove_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart_selected", bundle: ..., traitCollection: ...)`
    static func ic_heart_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_heart_unselected", bundle: ..., traitCollection: ...)`
    static func ic_heart_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_heart_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home_selected", bundle: ..., traitCollection: ...)`
    static func ic_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home_unselected", bundle: ..., traitCollection: ...)`
    static func ic_home_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_instagram_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_instagram_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_last_minute_offer_side_menu_select", bundle: ..., traitCollection: ...)`
    static func ic_last_minute_offer_side_menu_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_last_minute_offer_side_menu_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_last_minute_offer_side_menu_unselect", bundle: ..., traitCollection: ...)`
    static func ic_last_minute_offer_side_menu_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_last_minute_offer_side_menu_unselect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_location_contact_page", bundle: ..., traitCollection: ...)`
    static func ic_location_contact_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_contact_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logout_sidemenu", bundle: ..., traitCollection: ...)`
    static func ic_logout_sidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout_sidemenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mackup_category", bundle: ..., traitCollection: ...)`
    static func ic_mackup_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mackup_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_manageSalon_selected", bundle: ..., traitCollection: ...)`
    static func ic_manageSalon_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_manageSalon_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_manageSalon_unselected", bundle: ..., traitCollection: ...)`
    static func ic_manageSalon_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_manageSalon_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_massage_category", bundle: ..., traitCollection: ...)`
    static func ic_massage_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_massage_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_menubar_header", bundle: ..., traitCollection: ...)`
    static func ic_menubar_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menubar_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_message_contact_page", bundle: ..., traitCollection: ...)`
    static func ic_message_contact_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message_contact_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_message_request_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_message_request_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message_request_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_minus", bundle: ..., traitCollection: ...)`
    static func ic_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_appointment_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_my_appointment_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_appointment_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_appointment_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_my_appointment_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_appointment_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_profile_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_my_profile_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_profile_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_my_profile_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_my_profile_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_profile_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nail_category", bundle: ..., traitCollection: ...)`
    static func ic_nail_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nail_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_notification", bundle: ..., traitCollection: ...)`
    static func ic_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_payment_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_payment_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_payment_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_phone_dark", bundle: ..., traitCollection: ...)`
    static func ic_phone_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone_dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pintrest_plus_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_pintrest_plus_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pintrest_plus_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_plus", bundle: ..., traitCollection: ...)`
    static func ic_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_privacy_policy_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_privacy_policy_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_privacy_policy_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_privacy_policy_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_privacy_policy_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_privacy_policy_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profile_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_profile_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_report_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_report_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_report_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_report_selected", bundle: ..., traitCollection: ...)`
    static func ic_report_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_report_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_report_unselected", bundle: ..., traitCollection: ...)`
    static func ic_report_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_report_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_request_notification_screen", bundle: ..., traitCollection: ...)`
    static func ic_request_notification_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_request_notification_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_home_page", bundle: ..., traitCollection: ...)`
    static func ic_search_home_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_home_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_individual_home_page", bundle: ..., traitCollection: ...)`
    static func ic_search_individual_home_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_individual_home_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_salon_home_page", bundle: ..., traitCollection: ...)`
    static func ic_search_salon_home_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_salon_home_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_sidemenu_selected", bundle: ..., traitCollection: ...)`
    static func ic_search_sidemenu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_sidemenu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_sidemenu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_search_sidemenu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_sidemenu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting_dashboard", bundle: ..., traitCollection: ...)`
    static func ic_setting_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_share_header", bundle: ..., traitCollection: ...)`
    static func ic_share_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_selected_feedback", bundle: ..., traitCollection: ...)`
    static func ic_star_selected_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_selected_feedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star_unselected_feedback", bundle: ..., traitCollection: ...)`
    static func ic_star_unselected_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_unselected_feedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_term_and_condition_side_menu_selected", bundle: ..., traitCollection: ...)`
    static func ic_term_and_condition_side_menu_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_term_and_condition_side_menu_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_term_and_condition_side_menu_unselected", bundle: ..., traitCollection: ...)`
    static func ic_term_and_condition_side_menu_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_term_and_condition_side_menu_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_twitter_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_twitter_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user_dark_gray", bundle: ..., traitCollection: ...)`
    static func ic_user_dark_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_dark_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_website_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_website_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_website_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_whatsapp_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_whatsapp_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_whatsapp_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_youtube_edit_salon_details", bundle: ..., traitCollection: ...)`
    static func ic_youtube_edit_salon_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube_edit_salon_details, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_color_picker", bundle: ..., traitCollection: ...)`
    static func icon_color_picker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_color_picker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_upload_photo", bundle: ..., traitCollection: ...)`
    static func img_upload_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_upload_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_header", bundle: ..., traitCollection: ...)`
    static func logo_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_header, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_home_screen", bundle: ..., traitCollection: ...)`
    static func logo_home_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_home_screen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_login_page", bundle: ..., traitCollection: ...)`
    static func logo_login_page(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_login_page, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map_pin_blue", bundle: ..., traitCollection: ...)`
    static func map_pin_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_pin_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_record", bundle: ..., traitCollection: ...)`
    static func no_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_record, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder__client", bundle: ..., traitCollection: ...)`
    static func placeholder__client(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder__client, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_employee", bundle: ..., traitCollection: ...)`
    static func placeholder_employee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_employee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_listing_salon", bundle: ..., traitCollection: ...)`
    static func placeholder_listing_salon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_listing_salon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_main_category", bundle: ..., traitCollection: ...)`
    static func placeholder_main_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_main_category, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_map", bundle: ..., traitCollection: ...)`
    static func placeholder_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_user", bundle: ..., traitCollection: ...)`
    static func placeholder_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_box_blue", bundle: ..., traitCollection: ...)`
    static func search_box_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_box_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "seprator_dotted", bundle: ..., traitCollection: ...)`
    static func seprator_dotted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seprator_dotted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "seprator_dotted-1", bundle: ..., traitCollection: ...)`
    static func seprator_dotted1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seprator_dotted1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_big", bundle: ..., traitCollection: ...)`
    static func star_big(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_big, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_selected", bundle: ..., traitCollection: ...)`
    static func star_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_small_unselected", bundle: ..., traitCollection: ...)`
    static func star_small_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_small_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star_unselected", bundle: ..., traitCollection: ...)`
    static func star_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_unselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_selected_left", bundle: ..., traitCollection: ...)`
    static func tab_selected_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_selected_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_selected_right", bundle: ..., traitCollection: ...)`
    static func tab_selected_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_selected_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_unselected_left", bundle: ..., traitCollection: ...)`
    static func tab_unselected_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_unselected_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_unselected_right", bundle: ..., traitCollection: ...)`
    static func tab_unselected_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_unselected_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user_placeholder_side_menu", bundle: ..., traitCollection: ...)`
    static func user_placeholder_side_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_placeholder_side_menu, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 110 nibs.
  struct nib {
    /// Nib `AddAppointmentVC`.
    static let addAppointmentVC = _R.nib._AddAppointmentVC()
    /// Nib `AddClientVC`.
    static let addClientVC = _R.nib._AddClientVC()
    /// Nib `AddEmployeeVC`.
    static let addEmployeeVC = _R.nib._AddEmployeeVC()
    /// Nib `AddGroupPopupView`.
    static let addGroupPopupView = _R.nib._AddGroupPopupView()
    /// Nib `AddServiceVC`.
    static let addServiceVC = _R.nib._AddServiceVC()
    /// Nib `AfterCheckoutVC`.
    static let afterCheckoutVC = _R.nib._AfterCheckoutVC()
    /// Nib `AppointmentDetailVC`.
    static let appointmentDetailVC = _R.nib._AppointmentDetailVC()
    /// Nib `BookingCell`.
    static let bookingCell = _R.nib._BookingCell()
    /// Nib `BookingPaymentCells`.
    static let bookingPaymentCells = _R.nib._BookingPaymentCells()
    /// Nib `BookingPaymentPromocodeCell`.
    static let bookingPaymentPromocodeCell = _R.nib._BookingPaymentPromocodeCell()
    /// Nib `BookingPaymentVC`.
    static let bookingPaymentVC = _R.nib._BookingPaymentVC()
    /// Nib `BookingTimeSlotCell`.
    static let bookingTimeSlotCell = _R.nib._BookingTimeSlotCell()
    /// Nib `BookingVC`.
    static let bookingVC = _R.nib._BookingVC()
    /// Nib `ClientAppointmentListCell`.
    static let clientAppointmentListCell = _R.nib._ClientAppointmentListCell()
    /// Nib `ClientDetailVC`.
    static let clientDetailVC = _R.nib._ClientDetailVC()
    /// Nib `ClientListCell`.
    static let clientListCell = _R.nib._ClientListCell()
    /// Nib `ColorPickerView`.
    static let colorPickerView = _R.nib._ColorPickerView()
    /// Nib `ConfirmBookingCell`.
    static let confirmBookingCell = _R.nib._ConfirmBookingCell()
    /// Nib `ConfirmBookingVC`.
    static let confirmBookingVC = _R.nib._ConfirmBookingVC()
    /// Nib `ContactusCell1`.
    static let contactusCell1 = _R.nib._ContactusCell1()
    /// Nib `ContactusCell2`.
    static let contactusCell2 = _R.nib._ContactusCell2()
    /// Nib `ContactusCell`.
    static let contactusCell = _R.nib._ContactusCell()
    /// Nib `Contactus`.
    static let contactus = _R.nib._Contactus()
    /// Nib `CustomPopHomeCell`.
    static let customPopHomeCell = _R.nib._CustomPopHomeCell()
    /// Nib `CustomPopHomeVC`.
    static let customPopHomeVC = _R.nib._CustomPopHomeVC()
    /// Nib `CustomPopMyAppointmentFeedBackVC`.
    static let customPopMyAppointmentFeedBackVC = _R.nib._CustomPopMyAppointmentFeedBackVC()
    /// Nib `CustomPopMyAppointmentVC`.
    static let customPopMyAppointmentVC = _R.nib._CustomPopMyAppointmentVC()
    /// Nib `DashbaordCell`.
    static let dashbaordCell = _R.nib._DashbaordCell()
    /// Nib `EditExtraDetailVC`.
    static let editExtraDetailVC = _R.nib._EditExtraDetailVC()
    /// Nib `EditSalonDetailVC`.
    static let editSalonDetailVC = _R.nib._EditSalonDetailVC()
    /// Nib `EmployeeCell`.
    static let employeeCell = _R.nib._EmployeeCell()
    /// Nib `EmployeeReportDetailCell`.
    static let employeeReportDetailCell = _R.nib._EmployeeReportDetailCell()
    /// Nib `FilterCells`.
    static let filterCells = _R.nib._FilterCells()
    /// Nib `FilterMainCategoryCell`.
    static let filterMainCategoryCell = _R.nib._FilterMainCategoryCell()
    /// Nib `FilterSubCategoryCell`.
    static let filterSubCategoryCell = _R.nib._FilterSubCategoryCell()
    /// Nib `FilterVC`.
    static let filterVC = _R.nib._FilterVC()
    /// Nib `ForgotPasswordVC`.
    static let forgotPasswordVC = _R.nib._ForgotPasswordVC()
    /// Nib `HomeCell`.
    static let homeCell = _R.nib._HomeCell()
    /// Nib `HomeHeaderCell`.
    static let homeHeaderCell = _R.nib._HomeHeaderCell()
    /// Nib `HomeSearchHeaderSubCell`.
    static let homeSearchHeaderSubCell = _R.nib._HomeSearchHeaderSubCell()
    /// Nib `HomeSearchResultSubCell`.
    static let homeSearchResultSubCell = _R.nib._HomeSearchResultSubCell()
    /// Nib `HomeSearchVC`.
    static let homeSearchVC = _R.nib._HomeSearchVC()
    /// Nib `HomeVC`.
    static let homeVC = _R.nib._HomeVC()
    /// Nib `LastMintOfferBookCell1`.
    static let lastMintOfferBookCell1 = _R.nib._LastMintOfferBookCell1()
    /// Nib `LastMintOfferBookCell2`.
    static let lastMintOfferBookCell2 = _R.nib._LastMintOfferBookCell2()
    /// Nib `LastMintOfferBookCell3`.
    static let lastMintOfferBookCell3 = _R.nib._LastMintOfferBookCell3()
    /// Nib `LastMintOfferBookVC`.
    static let lastMintOfferBookVC = _R.nib._LastMintOfferBookVC()
    /// Nib `LastMintOfferCell`.
    static let lastMintOfferCell = _R.nib._LastMintOfferCell()
    /// Nib `LastMintOfferDetailCell`.
    static let lastMintOfferDetailCell = _R.nib._LastMintOfferDetailCell()
    /// Nib `LastMintOfferDetailVC`.
    static let lastMintOfferDetailVC = _R.nib._LastMintOfferDetailVC()
    /// Nib `LastMintOfferVC`.
    static let lastMintOfferVC = _R.nib._LastMintOfferVC()
    /// Nib `LastMinuteOfferCell`.
    static let lastMinuteOfferCell = _R.nib._LastMinuteOfferCell()
    /// Nib `LastMinuteOfferDetailVC`.
    static let lastMinuteOfferDetailVC = _R.nib._LastMinuteOfferDetailVC()
    /// Nib `LastMinuteOfferList`.
    static let lastMinuteOfferList = _R.nib._LastMinuteOfferList()
    /// Nib `LastMinuteOfferVC`.
    static let lastMinuteOfferVC = _R.nib._LastMinuteOfferVC()
    /// Nib `LeftMenuCell`.
    static let leftMenuCell = _R.nib._LeftMenuCell()
    /// Nib `LeftMenuVC`.
    static let leftMenuVC = _R.nib._LeftMenuVC()
    /// Nib `LoginVC`.
    static let loginVC = _R.nib._LoginVC()
    /// Nib `ManageEmployeeVC`.
    static let manageEmployeeVC = _R.nib._ManageEmployeeVC()
    /// Nib `ManageOptionCell`.
    static let manageOptionCell = _R.nib._ManageOptionCell()
    /// Nib `ManagePicturesVC`.
    static let managePicturesVC = _R.nib._ManagePicturesVC()
    /// Nib `ManageProgramCell`.
    static let manageProgramCell = _R.nib._ManageProgramCell()
    /// Nib `ManageProgramVC`.
    static let manageProgramVC = _R.nib._ManageProgramVC()
    /// Nib `ManageSalonVC`.
    static let manageSalonVC = _R.nib._ManageSalonVC()
    /// Nib `ManageServiceVC`.
    static let manageServiceVC = _R.nib._ManageServiceVC()
    /// Nib `MessageRecieverCell`.
    static let messageRecieverCell = _R.nib._MessageRecieverCell()
    /// Nib `MessageSenderCell`.
    static let messageSenderCell = _R.nib._MessageSenderCell()
    /// Nib `MessageVC`.
    static let messageVC = _R.nib._MessageVC()
    /// Nib `MonthStatisticCell`.
    static let monthStatisticCell = _R.nib._MonthStatisticCell()
    /// Nib `MyAppointmentHeaderCell`.
    static let myAppointmentHeaderCell = _R.nib._MyAppointmentHeaderCell()
    /// Nib `MyAppointmentUpcomingCell`.
    static let myAppointmentUpcomingCell = _R.nib._MyAppointmentUpcomingCell()
    /// Nib `MyAppointmentUpcomingLastMinCell`.
    static let myAppointmentUpcomingLastMinCell = _R.nib._MyAppointmentUpcomingLastMinCell()
    /// Nib `MyAppointmentVC`.
    static let myAppointmentVC = _R.nib._MyAppointmentVC()
    /// Nib `MyFavoriteCell`.
    static let myFavoriteCell = _R.nib._MyFavoriteCell()
    /// Nib `MyFavoriteSalon`.
    static let myFavoriteSalon = _R.nib._MyFavoriteSalon()
    /// Nib `MyProfileVC`.
    static let myProfileVC = _R.nib._MyProfileVC()
    /// Nib `NewAppointmentVC`.
    static let newAppointmentVC = _R.nib._NewAppointmentVC()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `NotificatonVC`.
    static let notificatonVC = _R.nib._NotificatonVC()
    /// Nib `PersonalVC`.
    static let personalVC = _R.nib._PersonalVC()
    /// Nib `PreviewMessageCell`.
    static let previewMessageCell = _R.nib._PreviewMessageCell()
    /// Nib `ReportDetailCell`.
    static let reportDetailCell = _R.nib._ReportDetailCell()
    /// Nib `ReportVC`.
    static let reportVC = _R.nib._ReportVC()
    /// Nib `SalonBookNowSubCell`.
    static let salonBookNowSubCell = _R.nib._SalonBookNowSubCell()
    /// Nib `SalonClientList`.
    static let salonClientList = _R.nib._SalonClientList()
    /// Nib `SalonDashboard`.
    static let salonDashboard = _R.nib._SalonDashboard()
    /// Nib `SalonDetailInfoDescriptionCell`.
    static let salonDetailInfoDescriptionCell = _R.nib._SalonDetailInfoDescriptionCell()
    /// Nib `SalonDetailInfoHeaderCell`.
    static let salonDetailInfoHeaderCell = _R.nib._SalonDetailInfoHeaderCell()
    /// Nib `SalonDetailInfoLocationCell`.
    static let salonDetailInfoLocationCell = _R.nib._SalonDetailInfoLocationCell()
    /// Nib `SalonDetailInfoProgramCell`.
    static let salonDetailInfoProgramCell = _R.nib._SalonDetailInfoProgramCell()
    /// Nib `SalonDetailInfoSocialCell`.
    static let salonDetailInfoSocialCell = _R.nib._SalonDetailInfoSocialCell()
    /// Nib `SalonDetailInfoTeamCell`.
    static let salonDetailInfoTeamCell = _R.nib._SalonDetailInfoTeamCell()
    /// Nib `SalonDetailInfoTeamCollectionCell`.
    static let salonDetailInfoTeamCollectionCell = _R.nib._SalonDetailInfoTeamCollectionCell()
    /// Nib `SalonDetailInfoUtilityCell`.
    static let salonDetailInfoUtilityCell = _R.nib._SalonDetailInfoUtilityCell()
    /// Nib `SalonDetailReviewCell`.
    static let salonDetailReviewCell = _R.nib._SalonDetailReviewCell()
    /// Nib `SalonDetailServiceCells`.
    static let salonDetailServiceCells = _R.nib._SalonDetailServiceCells()
    /// Nib `SalonDetailVC`.
    static let salonDetailVC = _R.nib._SalonDetailVC()
    /// Nib `SalonListVC`.
    static let salonListVC = _R.nib._SalonListVC()
    /// Nib `SalonPictureCell`.
    static let salonPictureCell = _R.nib._SalonPictureCell()
    /// Nib `SalonSignupVC`.
    static let salonSignupVC = _R.nib._SalonSignupVC()
    /// Nib `ServiceCell`.
    static let serviceCell = _R.nib._ServiceCell()
    /// Nib `ServiceHeaderCell`.
    static let serviceHeaderCell = _R.nib._ServiceHeaderCell()
    /// Nib `ServiceItemCell`.
    static let serviceItemCell = _R.nib._ServiceItemCell()
    /// Nib `ServicesCell`.
    static let servicesCell = _R.nib._ServicesCell()
    /// Nib `ServicesVC`.
    static let servicesVC = _R.nib._ServicesVC()
    /// Nib `SignupVC`.
    static let signupVC = _R.nib._SignupVC()
    /// Nib `TermsAndConditionVC`.
    static let termsAndConditionVC = _R.nib._TermsAndConditionVC()
    /// Nib `TimeBookingCell`.
    static let timeBookingCell = _R.nib._TimeBookingCell()
    /// Nib `TimePickerView`.
    static let timePickerView = _R.nib._TimePickerView()
    /// Nib `UtilityCell`.
    static let utilityCell = _R.nib._UtilityCell()
    
    /// `UINib(name: "AddAppointmentVC", in: bundle)`
    static func addAppointmentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAppointmentVC)
    }
    
    /// `UINib(name: "AddClientVC", in: bundle)`
    static func addClientVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addClientVC)
    }
    
    /// `UINib(name: "AddEmployeeVC", in: bundle)`
    static func addEmployeeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addEmployeeVC)
    }
    
    /// `UINib(name: "AddGroupPopupView", in: bundle)`
    static func addGroupPopupView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addGroupPopupView)
    }
    
    /// `UINib(name: "AddServiceVC", in: bundle)`
    static func addServiceVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addServiceVC)
    }
    
    /// `UINib(name: "AfterCheckoutVC", in: bundle)`
    static func afterCheckoutVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.afterCheckoutVC)
    }
    
    /// `UINib(name: "AppointmentDetailVC", in: bundle)`
    static func appointmentDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appointmentDetailVC)
    }
    
    /// `UINib(name: "BookingCell", in: bundle)`
    static func bookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCell)
    }
    
    /// `UINib(name: "BookingPaymentCells", in: bundle)`
    static func bookingPaymentCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingPaymentCells)
    }
    
    /// `UINib(name: "BookingPaymentPromocodeCell", in: bundle)`
    static func bookingPaymentPromocodeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingPaymentPromocodeCell)
    }
    
    /// `UINib(name: "BookingPaymentVC", in: bundle)`
    static func bookingPaymentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingPaymentVC)
    }
    
    /// `UINib(name: "BookingTimeSlotCell", in: bundle)`
    static func bookingTimeSlotCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingTimeSlotCell)
    }
    
    /// `UINib(name: "BookingVC", in: bundle)`
    static func bookingVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingVC)
    }
    
    /// `UINib(name: "ClientAppointmentListCell", in: bundle)`
    static func clientAppointmentListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clientAppointmentListCell)
    }
    
    /// `UINib(name: "ClientDetailVC", in: bundle)`
    static func clientDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clientDetailVC)
    }
    
    /// `UINib(name: "ClientListCell", in: bundle)`
    static func clientListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.clientListCell)
    }
    
    /// `UINib(name: "ColorPickerView", in: bundle)`
    static func colorPickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.colorPickerView)
    }
    
    /// `UINib(name: "ConfirmBookingCell", in: bundle)`
    static func confirmBookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmBookingCell)
    }
    
    /// `UINib(name: "ConfirmBookingVC", in: bundle)`
    static func confirmBookingVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmBookingVC)
    }
    
    /// `UINib(name: "Contactus", in: bundle)`
    static func contactus(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactus)
    }
    
    /// `UINib(name: "ContactusCell", in: bundle)`
    static func contactusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactusCell)
    }
    
    /// `UINib(name: "ContactusCell1", in: bundle)`
    static func contactusCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactusCell1)
    }
    
    /// `UINib(name: "ContactusCell2", in: bundle)`
    static func contactusCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactusCell2)
    }
    
    /// `UINib(name: "CustomPopHomeCell", in: bundle)`
    static func customPopHomeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPopHomeCell)
    }
    
    /// `UINib(name: "CustomPopHomeVC", in: bundle)`
    static func customPopHomeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPopHomeVC)
    }
    
    /// `UINib(name: "CustomPopMyAppointmentFeedBackVC", in: bundle)`
    static func customPopMyAppointmentFeedBackVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPopMyAppointmentFeedBackVC)
    }
    
    /// `UINib(name: "CustomPopMyAppointmentVC", in: bundle)`
    static func customPopMyAppointmentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPopMyAppointmentVC)
    }
    
    /// `UINib(name: "DashbaordCell", in: bundle)`
    static func dashbaordCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashbaordCell)
    }
    
    /// `UINib(name: "EditExtraDetailVC", in: bundle)`
    static func editExtraDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editExtraDetailVC)
    }
    
    /// `UINib(name: "EditSalonDetailVC", in: bundle)`
    static func editSalonDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editSalonDetailVC)
    }
    
    /// `UINib(name: "EmployeeCell", in: bundle)`
    static func employeeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.employeeCell)
    }
    
    /// `UINib(name: "EmployeeReportDetailCell", in: bundle)`
    static func employeeReportDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.employeeReportDetailCell)
    }
    
    /// `UINib(name: "FilterCells", in: bundle)`
    static func filterCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterCells)
    }
    
    /// `UINib(name: "FilterMainCategoryCell", in: bundle)`
    static func filterMainCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterMainCategoryCell)
    }
    
    /// `UINib(name: "FilterSubCategoryCell", in: bundle)`
    static func filterSubCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterSubCategoryCell)
    }
    
    /// `UINib(name: "FilterVC", in: bundle)`
    static func filterVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterVC)
    }
    
    /// `UINib(name: "ForgotPasswordVC", in: bundle)`
    static func forgotPasswordVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgotPasswordVC)
    }
    
    /// `UINib(name: "HomeCell", in: bundle)`
    static func homeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCell)
    }
    
    /// `UINib(name: "HomeHeaderCell", in: bundle)`
    static func homeHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeHeaderCell)
    }
    
    /// `UINib(name: "HomeSearchHeaderSubCell", in: bundle)`
    static func homeSearchHeaderSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSearchHeaderSubCell)
    }
    
    /// `UINib(name: "HomeSearchResultSubCell", in: bundle)`
    static func homeSearchResultSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSearchResultSubCell)
    }
    
    /// `UINib(name: "HomeSearchVC", in: bundle)`
    static func homeSearchVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSearchVC)
    }
    
    /// `UINib(name: "HomeVC", in: bundle)`
    static func homeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeVC)
    }
    
    /// `UINib(name: "LastMintOfferBookCell1", in: bundle)`
    static func lastMintOfferBookCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferBookCell1)
    }
    
    /// `UINib(name: "LastMintOfferBookCell2", in: bundle)`
    static func lastMintOfferBookCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferBookCell2)
    }
    
    /// `UINib(name: "LastMintOfferBookCell3", in: bundle)`
    static func lastMintOfferBookCell3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferBookCell3)
    }
    
    /// `UINib(name: "LastMintOfferBookVC", in: bundle)`
    static func lastMintOfferBookVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferBookVC)
    }
    
    /// `UINib(name: "LastMintOfferCell", in: bundle)`
    static func lastMintOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferCell)
    }
    
    /// `UINib(name: "LastMintOfferDetailCell", in: bundle)`
    static func lastMintOfferDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferDetailCell)
    }
    
    /// `UINib(name: "LastMintOfferDetailVC", in: bundle)`
    static func lastMintOfferDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferDetailVC)
    }
    
    /// `UINib(name: "LastMintOfferVC", in: bundle)`
    static func lastMintOfferVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMintOfferVC)
    }
    
    /// `UINib(name: "LastMinuteOfferCell", in: bundle)`
    static func lastMinuteOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMinuteOfferCell)
    }
    
    /// `UINib(name: "LastMinuteOfferDetailVC", in: bundle)`
    static func lastMinuteOfferDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMinuteOfferDetailVC)
    }
    
    /// `UINib(name: "LastMinuteOfferList", in: bundle)`
    static func lastMinuteOfferList(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMinuteOfferList)
    }
    
    /// `UINib(name: "LastMinuteOfferVC", in: bundle)`
    static func lastMinuteOfferVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastMinuteOfferVC)
    }
    
    /// `UINib(name: "LeftMenuCell", in: bundle)`
    static func leftMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftMenuCell)
    }
    
    /// `UINib(name: "LeftMenuVC", in: bundle)`
    static func leftMenuVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftMenuVC)
    }
    
    /// `UINib(name: "LoginVC", in: bundle)`
    static func loginVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginVC)
    }
    
    /// `UINib(name: "ManageEmployeeVC", in: bundle)`
    static func manageEmployeeVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageEmployeeVC)
    }
    
    /// `UINib(name: "ManageOptionCell", in: bundle)`
    static func manageOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageOptionCell)
    }
    
    /// `UINib(name: "ManagePicturesVC", in: bundle)`
    static func managePicturesVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.managePicturesVC)
    }
    
    /// `UINib(name: "ManageProgramCell", in: bundle)`
    static func manageProgramCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageProgramCell)
    }
    
    /// `UINib(name: "ManageProgramVC", in: bundle)`
    static func manageProgramVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageProgramVC)
    }
    
    /// `UINib(name: "ManageSalonVC", in: bundle)`
    static func manageSalonVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageSalonVC)
    }
    
    /// `UINib(name: "ManageServiceVC", in: bundle)`
    static func manageServiceVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.manageServiceVC)
    }
    
    /// `UINib(name: "MessageRecieverCell", in: bundle)`
    static func messageRecieverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageRecieverCell)
    }
    
    /// `UINib(name: "MessageSenderCell", in: bundle)`
    static func messageSenderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageSenderCell)
    }
    
    /// `UINib(name: "MessageVC", in: bundle)`
    static func messageVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageVC)
    }
    
    /// `UINib(name: "MonthStatisticCell", in: bundle)`
    static func monthStatisticCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.monthStatisticCell)
    }
    
    /// `UINib(name: "MyAppointmentHeaderCell", in: bundle)`
    static func myAppointmentHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAppointmentHeaderCell)
    }
    
    /// `UINib(name: "MyAppointmentUpcomingCell", in: bundle)`
    static func myAppointmentUpcomingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAppointmentUpcomingCell)
    }
    
    /// `UINib(name: "MyAppointmentUpcomingLastMinCell", in: bundle)`
    static func myAppointmentUpcomingLastMinCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAppointmentUpcomingLastMinCell)
    }
    
    /// `UINib(name: "MyAppointmentVC", in: bundle)`
    static func myAppointmentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAppointmentVC)
    }
    
    /// `UINib(name: "MyFavoriteCell", in: bundle)`
    static func myFavoriteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFavoriteCell)
    }
    
    /// `UINib(name: "MyFavoriteSalon", in: bundle)`
    static func myFavoriteSalon(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myFavoriteSalon)
    }
    
    /// `UINib(name: "MyProfileVC", in: bundle)`
    static func myProfileVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myProfileVC)
    }
    
    /// `UINib(name: "NewAppointmentVC", in: bundle)`
    static func newAppointmentVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newAppointmentVC)
    }
    
    /// `UINib(name: "NotificationCell", in: bundle)`
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    
    /// `UINib(name: "NotificatonVC", in: bundle)`
    static func notificatonVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificatonVC)
    }
    
    /// `UINib(name: "PersonalVC", in: bundle)`
    static func personalVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.personalVC)
    }
    
    /// `UINib(name: "PreviewMessageCell", in: bundle)`
    static func previewMessageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewMessageCell)
    }
    
    /// `UINib(name: "ReportDetailCell", in: bundle)`
    static func reportDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportDetailCell)
    }
    
    /// `UINib(name: "ReportVC", in: bundle)`
    static func reportVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportVC)
    }
    
    /// `UINib(name: "SalonBookNowSubCell", in: bundle)`
    static func salonBookNowSubCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonBookNowSubCell)
    }
    
    /// `UINib(name: "SalonClientList", in: bundle)`
    static func salonClientList(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonClientList)
    }
    
    /// `UINib(name: "SalonDashboard", in: bundle)`
    static func salonDashboard(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDashboard)
    }
    
    /// `UINib(name: "SalonDetailInfoDescriptionCell", in: bundle)`
    static func salonDetailInfoDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoDescriptionCell)
    }
    
    /// `UINib(name: "SalonDetailInfoHeaderCell", in: bundle)`
    static func salonDetailInfoHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoHeaderCell)
    }
    
    /// `UINib(name: "SalonDetailInfoLocationCell", in: bundle)`
    static func salonDetailInfoLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoLocationCell)
    }
    
    /// `UINib(name: "SalonDetailInfoProgramCell", in: bundle)`
    static func salonDetailInfoProgramCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoProgramCell)
    }
    
    /// `UINib(name: "SalonDetailInfoSocialCell", in: bundle)`
    static func salonDetailInfoSocialCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoSocialCell)
    }
    
    /// `UINib(name: "SalonDetailInfoTeamCell", in: bundle)`
    static func salonDetailInfoTeamCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoTeamCell)
    }
    
    /// `UINib(name: "SalonDetailInfoTeamCollectionCell", in: bundle)`
    static func salonDetailInfoTeamCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoTeamCollectionCell)
    }
    
    /// `UINib(name: "SalonDetailInfoUtilityCell", in: bundle)`
    static func salonDetailInfoUtilityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailInfoUtilityCell)
    }
    
    /// `UINib(name: "SalonDetailReviewCell", in: bundle)`
    static func salonDetailReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailReviewCell)
    }
    
    /// `UINib(name: "SalonDetailServiceCells", in: bundle)`
    static func salonDetailServiceCells(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailServiceCells)
    }
    
    /// `UINib(name: "SalonDetailVC", in: bundle)`
    static func salonDetailVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonDetailVC)
    }
    
    /// `UINib(name: "SalonListVC", in: bundle)`
    static func salonListVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonListVC)
    }
    
    /// `UINib(name: "SalonPictureCell", in: bundle)`
    static func salonPictureCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonPictureCell)
    }
    
    /// `UINib(name: "SalonSignupVC", in: bundle)`
    static func salonSignupVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salonSignupVC)
    }
    
    /// `UINib(name: "ServiceCell", in: bundle)`
    static func serviceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceCell)
    }
    
    /// `UINib(name: "ServiceHeaderCell", in: bundle)`
    static func serviceHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceHeaderCell)
    }
    
    /// `UINib(name: "ServiceItemCell", in: bundle)`
    static func serviceItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceItemCell)
    }
    
    /// `UINib(name: "ServicesCell", in: bundle)`
    static func servicesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesCell)
    }
    
    /// `UINib(name: "ServicesVC", in: bundle)`
    static func servicesVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesVC)
    }
    
    /// `UINib(name: "SignupVC", in: bundle)`
    static func signupVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signupVC)
    }
    
    /// `UINib(name: "TermsAndConditionVC", in: bundle)`
    static func termsAndConditionVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.termsAndConditionVC)
    }
    
    /// `UINib(name: "TimeBookingCell", in: bundle)`
    static func timeBookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeBookingCell)
    }
    
    /// `UINib(name: "TimePickerView", in: bundle)`
    static func timePickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timePickerView)
    }
    
    /// `UINib(name: "UtilityCell", in: bundle)`
    static func utilityCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.utilityCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 41 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BokingTimeSlotCell`.
    static let bokingTimeSlotCell: Rswift.ReuseIdentifier<TimeBookingCell> = Rswift.ReuseIdentifier(identifier: "BokingTimeSlotCell")
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `BookingPaymentCells`.
    static let bookingPaymentCells: Rswift.ReuseIdentifier<BookingPaymentCells> = Rswift.ReuseIdentifier(identifier: "BookingPaymentCells")
    /// Reuse identifier `BookingPaymentPromocodeCell`.
    static let bookingPaymentPromocodeCell: Rswift.ReuseIdentifier<BookingPaymentCells> = Rswift.ReuseIdentifier(identifier: "BookingPaymentPromocodeCell")
    /// Reuse identifier `BookingTimeSlotCell`.
    static let bookingTimeSlotCell: Rswift.ReuseIdentifier<BookingTimeSlotCell> = Rswift.ReuseIdentifier(identifier: "BookingTimeSlotCell")
    /// Reuse identifier `Cell1`.
    static let cell1: Rswift.ReuseIdentifier<ContactusCell> = Rswift.ReuseIdentifier(identifier: "Cell1")
    /// Reuse identifier `Cell2`.
    static let cell2: Rswift.ReuseIdentifier<ContactusCell> = Rswift.ReuseIdentifier(identifier: "Cell2")
    /// Reuse identifier `Cell3`.
    static let cell3: Rswift.ReuseIdentifier<ContactusCell> = Rswift.ReuseIdentifier(identifier: "Cell3")
    /// Reuse identifier `ConfirmBookingCell`.
    static let confirmBookingCell: Rswift.ReuseIdentifier<ConfirmBookingCell> = Rswift.ReuseIdentifier(identifier: "ConfirmBookingCell")
    /// Reuse identifier `CustomPopHomeCell`.
    static let customPopHomeCell: Rswift.ReuseIdentifier<CustomPopHomeCell> = Rswift.ReuseIdentifier(identifier: "CustomPopHomeCell")
    /// Reuse identifier `FilterCells`.
    static let filterCells: Rswift.ReuseIdentifier<FilterCells> = Rswift.ReuseIdentifier(identifier: "FilterCells")
    /// Reuse identifier `FilterMainCategoryCell`.
    static let filterMainCategoryCell: Rswift.ReuseIdentifier<FilterCells> = Rswift.ReuseIdentifier(identifier: "FilterMainCategoryCell")
    /// Reuse identifier `FilterSubCategoryCell`.
    static let filterSubCategoryCell: Rswift.ReuseIdentifier<FilterCells> = Rswift.ReuseIdentifier(identifier: "FilterSubCategoryCell")
    /// Reuse identifier `HomeCell`.
    static let homeCell: Rswift.ReuseIdentifier<HomeCell> = Rswift.ReuseIdentifier(identifier: "HomeCell")
    /// Reuse identifier `HomeHeaderCell`.
    static let homeHeaderCell: Rswift.ReuseIdentifier<HomeCell> = Rswift.ReuseIdentifier(identifier: "HomeHeaderCell")
    /// Reuse identifier `HomeSearchCell`.
    static let homeSearchCell: Rswift.ReuseIdentifier<HomeSearchHeaderSubCell> = Rswift.ReuseIdentifier(identifier: "HomeSearchCell")
    /// Reuse identifier `HomeSearchHeaderSubCell`.
    static let homeSearchHeaderSubCell: Rswift.ReuseIdentifier<HomeSearchHeaderSubCell> = Rswift.ReuseIdentifier(identifier: "HomeSearchHeaderSubCell")
    /// Reuse identifier `LastMintOfferBookCell1`.
    static let lastMintOfferBookCell1: Rswift.ReuseIdentifier<LastMintOfferCell> = Rswift.ReuseIdentifier(identifier: "LastMintOfferBookCell1")
    /// Reuse identifier `LastMintOfferBookCell2`.
    static let lastMintOfferBookCell2: Rswift.ReuseIdentifier<LastMintOfferCell> = Rswift.ReuseIdentifier(identifier: "LastMintOfferBookCell2")
    /// Reuse identifier `LastMintOfferBookCell3`.
    static let lastMintOfferBookCell3: Rswift.ReuseIdentifier<LastMintOfferCell> = Rswift.ReuseIdentifier(identifier: "LastMintOfferBookCell3")
    /// Reuse identifier `LastMintOfferCell`.
    static let lastMintOfferCell: Rswift.ReuseIdentifier<LastMintOfferCell> = Rswift.ReuseIdentifier(identifier: "LastMintOfferCell")
    /// Reuse identifier `LastMintOfferDetailCell`.
    static let lastMintOfferDetailCell: Rswift.ReuseIdentifier<LastMintOfferCell> = Rswift.ReuseIdentifier(identifier: "LastMintOfferDetailCell")
    /// Reuse identifier `LeftMenuCell`.
    static let leftMenuCell: Rswift.ReuseIdentifier<LeftMenuCell> = Rswift.ReuseIdentifier(identifier: "LeftMenuCell")
    /// Reuse identifier `MessageRecieverCell`.
    static let messageRecieverCell: Rswift.ReuseIdentifier<MessageCells> = Rswift.ReuseIdentifier(identifier: "MessageRecieverCell")
    /// Reuse identifier `MessageSenderCell`.
    static let messageSenderCell: Rswift.ReuseIdentifier<MessageCells> = Rswift.ReuseIdentifier(identifier: "MessageSenderCell")
    /// Reuse identifier `MyAppointmentHeaderCell`.
    static let myAppointmentHeaderCell: Rswift.ReuseIdentifier<MyAppointmentCells> = Rswift.ReuseIdentifier(identifier: "MyAppointmentHeaderCell")
    /// Reuse identifier `MyAppointmentUpcomingCell`.
    static let myAppointmentUpcomingCell: Rswift.ReuseIdentifier<MyAppointmentCells> = Rswift.ReuseIdentifier(identifier: "MyAppointmentUpcomingCell")
    /// Reuse identifier `MyAppointmentUpcomingLastMinCell`.
    static let myAppointmentUpcomingLastMinCell: Rswift.ReuseIdentifier<MyAppointmentCells> = Rswift.ReuseIdentifier(identifier: "MyAppointmentUpcomingLastMinCell")
    /// Reuse identifier `MyFavoriteCell`.
    static let myFavoriteCell: Rswift.ReuseIdentifier<MyFavoriteCell> = Rswift.ReuseIdentifier(identifier: "MyFavoriteCell")
    /// Reuse identifier `SalonBookNowSubCell`.
    static let salonBookNowSubCell: Rswift.ReuseIdentifier<SalonBookNowSubCell> = Rswift.ReuseIdentifier(identifier: "SalonBookNowSubCell")
    /// Reuse identifier `SalonDetailInfoDescriptionCell`.
    static let salonDetailInfoDescriptionCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoDescriptionCell")
    /// Reuse identifier `SalonDetailInfoHeaderCell`.
    static let salonDetailInfoHeaderCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoHeaderCell")
    /// Reuse identifier `SalonDetailInfoLocationCell`.
    static let salonDetailInfoLocationCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoLocationCell")
    /// Reuse identifier `SalonDetailInfoProgramCell`.
    static let salonDetailInfoProgramCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoProgramCell")
    /// Reuse identifier `SalonDetailInfoSocialCell`.
    static let salonDetailInfoSocialCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoSocialCell")
    /// Reuse identifier `SalonDetailInfoTeamCell`.
    static let salonDetailInfoTeamCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoTeamCell")
    /// Reuse identifier `SalonDetailInfoTeamCollectionCell`.
    static let salonDetailInfoTeamCollectionCell: Rswift.ReuseIdentifier<SalonDetailInfoTeamCell> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoTeamCollectionCell")
    /// Reuse identifier `SalonDetailInfoUtilityCell`.
    static let salonDetailInfoUtilityCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailInfoUtilityCell")
    /// Reuse identifier `SalonDetailReviewCell`.
    static let salonDetailReviewCell: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailReviewCell")
    /// Reuse identifier `SalonDetailServiceCells`.
    static let salonDetailServiceCells: Rswift.ReuseIdentifier<SalonDetailCells> = Rswift.ReuseIdentifier(identifier: "SalonDetailServiceCells")
    /// Reuse identifier `ServicesCell`.
    static let servicesCell: Rswift.ReuseIdentifier<ServicesCell> = Rswift.ReuseIdentifier(identifier: "ServicesCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Signup`.
    static let signup = _R.storyboard.signup()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Signup", bundle: ...)`
    static func signup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signup)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.keys` struct is generated, and contains static references to 22 localization keys.
    struct keys {
      /// Value: access_token
      static let access_token = Rswift.StringResource(key: "access_token", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: b.7]>hp}wQDxN#B
      static let authPassword = Rswift.StringResource(key: "authPassword", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: business_type
      static let business_type = Rswift.StringResource(key: "business_type", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: city
      static let city = Rswift.StringResource(key: "city", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: data
      static let data = Rswift.StringResource(key: "data", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: device_token
      static let device_token = Rswift.StringResource(key: "device_token", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: device_type
      static let device_type = Rswift.StringResource(key: "device_type", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: email
      static let email = Rswift.StringResource(key: "email", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: flag
      static let flag = Rswift.StringResource(key: "flag", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: isUserSignIn
      static let isUserSignIn = Rswift.StringResource(key: "isUserSignIn", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lang
      static let lang = Rswift.StringResource(key: "lang", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lastname
      static let lastname = Rswift.StringResource(key: "lastname", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: lattitude
      static let lattitude = Rswift.StringResource(key: "lattitude", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: longtitude
      static let longtitude = Rswift.StringResource(key: "longtitude", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: mobile
      static let mobile = Rswift.StringResource(key: "mobile", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: msg
      static let msg = Rswift.StringResource(key: "msg", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: name
      static let firstname = Rswift.StringResource(key: "firstname", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: password
      static let password = Rswift.StringResource(key: "password", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: register_id
      static let register_id = Rswift.StringResource(key: "Register_id", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon
      static let authUsername = Rswift.StringResource(key: "authUsername", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salonUserDetail
      static let userDetail = Rswift.StringResource(key: "userDetail", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon_id
      static let salon_id = Rswift.StringResource(key: "salon_id", tableName: "Keys", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: access_token
      static func access_token(_: Void = ()) -> String {
        return NSLocalizedString("access_token", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: b.7]>hp}wQDxN#B
      static func authPassword(_: Void = ()) -> String {
        return NSLocalizedString("authPassword", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: business_type
      static func business_type(_: Void = ()) -> String {
        return NSLocalizedString("business_type", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: city
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("city", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: data
      static func data(_: Void = ()) -> String {
        return NSLocalizedString("data", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: device_token
      static func device_token(_: Void = ()) -> String {
        return NSLocalizedString("device_token", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: device_type
      static func device_type(_: Void = ()) -> String {
        return NSLocalizedString("device_type", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: email
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: flag
      static func flag(_: Void = ()) -> String {
        return NSLocalizedString("flag", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: isUserSignIn
      static func isUserSignIn(_: Void = ()) -> String {
        return NSLocalizedString("isUserSignIn", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: lang
      static func lang(_: Void = ()) -> String {
        return NSLocalizedString("lang", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: lastname
      static func lastname(_: Void = ()) -> String {
        return NSLocalizedString("lastname", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: lattitude
      static func lattitude(_: Void = ()) -> String {
        return NSLocalizedString("lattitude", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: longtitude
      static func longtitude(_: Void = ()) -> String {
        return NSLocalizedString("longtitude", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: mobile
      static func mobile(_: Void = ()) -> String {
        return NSLocalizedString("mobile", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: msg
      static func msg(_: Void = ()) -> String {
        return NSLocalizedString("msg", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: name
      static func firstname(_: Void = ()) -> String {
        return NSLocalizedString("firstname", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: password
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: register_id
      static func register_id(_: Void = ()) -> String {
        return NSLocalizedString("Register_id", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon
      static func authUsername(_: Void = ()) -> String {
        return NSLocalizedString("authUsername", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salonUserDetail
      static func userDetail(_: Void = ()) -> String {
        return NSLocalizedString("userDetail", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon_id
      static func salon_id(_: Void = ()) -> String {
        return NSLocalizedString("salon_id", tableName: "Keys", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 263 localization keys.
    struct localizable {
      /// Base translation: + View More
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_PlusViewMore = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_PlusViewMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: - View More
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_MinsViewMore = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_MinsViewMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: ADD UTILITIES
      /// 
      /// Locales: Base
      static let addUtility = Rswift.StringResource(key: "addUtility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: APPOINTMENT
      /// 
      /// Locales: Base
      static let appointmentHeader = Rswift.StringResource(key: "appointmentHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: About Terms & Conditions
      /// 
      /// Locales: Base
      static let lbl_TermsAndConditionsTitleName = Rswift.StringResource(key: "lbl_TermsAndConditionsTitleName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add
      /// 
      /// Locales: Base
      static let add = Rswift.StringResource(key: "add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add Appointment
      /// 
      /// Locales: Base
      static let addAppointment = Rswift.StringResource(key: "addAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add Clients
      /// 
      /// Locales: Base
      static let addClient = Rswift.StringResource(key: "addClient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add Employee
      /// 
      /// Locales: Base
      static let addEmployee = Rswift.StringResource(key: "addEmployee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add Group
      /// 
      /// Locales: Base
      static let addGroup = Rswift.StringResource(key: "addGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Add Service
      /// 
      /// Locales: Base
      static let addService = Rswift.StringResource(key: "addService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Agenda
      /// 
      /// Locales: Base, ro
      static let agenda = Rswift.StringResource(key: "agenda", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Already have an Account?
      /// 
      /// Locales: Base
      static let alreadyHaveAccount = Rswift.StringResource(key: "alreadyHaveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Already have an Account?
      /// 
      /// Locales: Base
      static let lbl_Register_AleradyHaveAccount = Rswift.StringResource(key: "lbl_Register_AleradyHaveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Any message type here
      /// 
      /// Locales: Base
      static let txtPlace_BookLastminOfferCell2_Comment = Rswift.StringResource(key: "txtPlace_BookLastminOfferCell2_Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Appointment
      /// 
      /// Locales: Base
      static let appointment = Rswift.StringResource(key: "appointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Appointments
      /// 
      /// Locales: Base
      static let appointments = Rswift.StringResource(key: "appointments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Are you sure want to cancel this appointment?
      /// 
      /// Locales: Base
      static let lbl_PopMyAppointment_CancelAppointment = Rswift.StringResource(key: "lbl_PopMyAppointment_CancelAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Are you sure? You want to logout.
      /// 
      /// Locales: Base
      static let areYouSureToLogout = Rswift.StringResource(key: "areYouSureToLogout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Beauty Professional
      /// 
      /// Locales: Base
      static let lbl_Register_BeautyProfessional = Rswift.StringResource(key: "lbl_Register_BeautyProfessional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Beauty Professionl
      /// 
      /// Locales: Base
      static let beatyProfessional = Rswift.StringResource(key: "beatyProfessional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Birthdate
      /// 
      /// Locales: Base
      static let birthdate = Rswift.StringResource(key: "birthdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Blog
      /// 
      /// Locales: Base
      static let blog = Rswift.StringResource(key: "blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Book Last Minute Offer
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferHeader = Rswift.StringResource(key: "lbl_BookLastminOfferHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Book Now
      /// 
      /// Locales: Base
      static let btn_BookLastminOfferCell_BookNow = Rswift.StringResource(key: "btn_BookLastminOfferCell_BookNow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Booking
      /// 
      /// Locales: Base
      static let lbl_BookingHeader = Rswift.StringResource(key: "lbl_BookingHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Business Type
      /// 
      /// Locales: Base
      static let businessType = Rswift.StringResource(key: "businessType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: CANCELATION POLICY
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell_CancelPolicy = Rswift.StringResource(key: "lbl_BookLastminOfferCell_CancelPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: CATEGORY
      /// 
      /// Locales: Base
      static let categoryHeader = Rswift.StringResource(key: "categoryHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let btn_MyAppointmentCell_Cancel = Rswift.StringResource(key: "btn_MyAppointmentCell_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let comman_btn_Cancel = Rswift.StringResource(key: "Comman_btn_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: City
      /// 
      /// Locales: Base
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Client
      /// 
      /// Locales: Base, ro
      static let client = Rswift.StringResource(key: "client", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Clients
      /// 
      /// Locales: Base
      static let clients = Rswift.StringResource(key: "clients", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Close
      /// 
      /// Locales: Base
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Comments
      /// 
      /// Locales: Base
      static let lbl_ContactusComment = Rswift.StringResource(key: "lbl_ContactusComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm Booking
      /// 
      /// Locales: Base
      static let lbl_ConfirmBookingHeader = Rswift.StringResource(key: "lbl_ConfirmBookingHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm Password
      /// 
      /// Locales: Base
      static let confirmPasword = Rswift.StringResource(key: "confirmPasword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm Password
      /// 
      /// Locales: Base
      static let txtPlace_Register_ConfirmPassword = Rswift.StringResource(key: "txtPlace_Register_ConfirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Confirm password doesn't match your password
      /// 
      /// Locales: Base
      static let msg_Notmatchconfirmpassword = Rswift.StringResource(key: "msg_Notmatchconfirmpassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Contact
      /// 
      /// Locales: Base
      static let contact = Rswift.StringResource(key: "contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Contact
      /// 
      /// Locales: Base
      static let lbl_Contact = Rswift.StringResource(key: "lbl_Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Contact us
      /// 
      /// Locales: Base
      static let lbl_ContactusHeader = Rswift.StringResource(key: "lbl_ContactusHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Continue with Facebook
      /// 
      /// Locales: Base
      static let btn_Register_Facebook = Rswift.StringResource(key: "btn_Register_Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Continue with Facebook
      /// 
      /// Locales: Base
      static let continueWithFB = Rswift.StringResource(key: "continueWithFB", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Country
      /// 
      /// Locales: Base
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DATE
      /// 
      /// Locales: Base
      static let lbl_FilterDate = Rswift.StringResource(key: "lbl_FilterDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DESCRIPTION
      /// 
      /// Locales: Base
      static let descriptionHeader = Rswift.StringResource(key: "descriptionHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DESCRIPTION
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell_Description = Rswift.StringResource(key: "lbl_BookLastminOfferCell_Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DISCOUNT
      /// 
      /// Locales: Base
      static let dicount = Rswift.StringResource(key: "dicount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: DURATION
      /// 
      /// Locales: Base
      static let durationHeader = Rswift.StringResource(key: "durationHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dashboard
      /// 
      /// Locales: Base, ro
      static let dashboard = Rswift.StringResource(key: "dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Date
      /// 
      /// Locales: Base
      static let lbl_ConfirmBooking_Date = Rswift.StringResource(key: "lbl_ConfirmBooking_Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Days
      /// 
      /// Locales: Base
      static let days = Rswift.StringResource(key: "days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Description
      /// 
      /// Locales: Base
      static let description = Rswift.StringResource(key: "description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Discount
      /// 
      /// Locales: Base
      static let lbl_ConfirmBooking_Discount = Rswift.StringResource(key: "lbl_ConfirmBooking_Discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Do you have promocode?
      /// 
      /// Locales: Base
      static let lbl_Booking_Doyouhavepromocode = Rswift.StringResource(key: "lbl_Booking_Doyouhavepromocode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Dollers Booked
      /// 
      /// Locales: Base
      static let dollersBooked = Rswift.StringResource(key: "dollersBooked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Don't have an Account?
      /// 
      /// Locales: Base
      static let dontHaveAccount = Rswift.StringResource(key: "dontHaveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base
      static let comman_btn_Done = Rswift.StringResource(key: "Comman_btn_Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Duration
      /// 
      /// Locales: Base
      static let lbl_ConfirmBooking_Duration = Rswift.StringResource(key: "lbl_ConfirmBooking_Duration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: EDIT SALON ADDRESS / PLACE WHERE YOU WORK
      /// 
      /// Locales: Base
      static let editSalonAddressHeader = Rswift.StringResource(key: "editSalonAddressHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: EMPLOYEE
      /// 
      /// Locales: Base
      static let employeeHeader = Rswift.StringResource(key: "employeeHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: EMPLOYEES
      /// 
      /// Locales: Base
      static let employees = Rswift.StringResource(key: "employees", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Edit Extra Details
      /// 
      /// Locales: Base
      static let editExtraDetail = Rswift.StringResource(key: "editExtraDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Edit Profile
      /// 
      /// Locales: Base
      static let editProfile = Rswift.StringResource(key: "editProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Edit Salon Detail
      /// 
      /// Locales: Base, ro
      static let editSalonDetail = Rswift.StringResource(key: "editSalonDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Email
      /// 
      /// Locales: Base
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email
      /// 
      /// Locales: Base
      static let txtPlace_Register_Email = Rswift.StringResource(key: "txtPlace_Register_Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email Can't be blank! 
      /// 
      /// Locales: Base
      static let enterEmailAddress = Rswift.StringResource(key: "enterEmailAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email ID
      /// 
      /// Locales: Base
      static let emailID = Rswift.StringResource(key: "emailID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Email ID
      /// 
      /// Locales: Base
      static let lbl_ContactusEmailID = Rswift.StringResource(key: "lbl_ContactusEmailID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter Comments or query
      /// 
      /// Locales: Base
      static let txtPlace_ContactusComment = Rswift.StringResource(key: "txtPlace_ContactusComment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter ID
      /// 
      /// Locales: Base
      static let txtPlace_ContactusEmailID = Rswift.StringResource(key: "txtPlace_ContactusEmailID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter Name
      /// 
      /// Locales: Base
      static let txtPlace_ContactusFullName = Rswift.StringResource(key: "txtPlace_ContactusFullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter Phone
      /// 
      /// Locales: Base
      static let txtPlace_ContactusPhone = Rswift.StringResource(key: "txtPlace_ContactusPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter Subject
      /// 
      /// Locales: Base
      static let txtPlace_ContactusSubject = Rswift.StringResource(key: "txtPlace_ContactusSubject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Enter promocode here
      /// 
      /// Locales: Base
      static let txtPlace_Booking_Enterpromocodehere = Rswift.StringResource(key: "txtPlace_Booking_Enterpromocodehere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Export Report
      /// 
      /// Locales: Base
      static let exportReport = Rswift.StringResource(key: "exportReport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Facebook Username
      /// 
      /// Locales: Base
      static let facebookPlaceHolder = Rswift.StringResource(key: "facebookPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Favorite
      /// 
      /// Locales: Base
      static let favorite = Rswift.StringResource(key: "favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Favorite Salon
      /// 
      /// Locales: Base
      static let lbl_FavoriteSalonHeader = Rswift.StringResource(key: "lbl_FavoriteSalonHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Fedback
      /// 
      /// Locales: Base
      static let btn_MyAppointmentCell_Fedback = Rswift.StringResource(key: "btn_MyAppointmentCell_Fedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Filter
      /// 
      /// Locales: Base
      static let lbl_FilterHeader = Rswift.StringResource(key: "lbl_FilterHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Find Salon / Service
      /// 
      /// Locales: Base
      static let lbl_FindSalonService = Rswift.StringResource(key: "lbl_FindSalonService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Finish Payment
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell3_FinishPayment = Rswift.StringResource(key: "lbl_BookLastminOfferCell3_FinishPayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Finished
      /// 
      /// Locales: Base
      static let finished = Rswift.StringResource(key: "finished", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: First Name
      /// 
      /// Locales: Base
      static let firstName = Rswift.StringResource(key: "firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: First Name
      /// 
      /// Locales: Base
      static let txtPlace_Register_FirstName = Rswift.StringResource(key: "txtPlace_Register_FirstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Free SMS / monthly
      /// 
      /// Locales: Base
      static let freeSMS = Rswift.StringResource(key: "freeSMS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Full Name
      /// 
      /// Locales: Base
      static let lbl_ContactusFullName = Rswift.StringResource(key: "lbl_ContactusFullName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: GENERAL
      /// 
      /// Locales: Base
      static let general = Rswift.StringResource(key: "general", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: GROUP SERVICES
      /// 
      /// Locales: Base
      static let groupService = Rswift.StringResource(key: "groupService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: GoolePlus Username
      /// 
      /// Locales: Base
      static let googlePlaceHolder = Rswift.StringResource(key: "googlePlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Help
      /// 
      /// Locales: Base
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: I accept Terms and Conditions of SalonX
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell3_AcceptTNCSalon = Rswift.StringResource(key: "lbl_BookLastminOfferCell3_AcceptTNCSalon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Info
      /// 
      /// Locales: Base
      static let btn_SalonDetail_Info = Rswift.StringResource(key: "btn_SalonDetail_Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Instragram Username
      /// 
      /// Locales: Base
      static let instagramPlaceHolder = Rswift.StringResource(key: "instagramPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Invalid Email 
      /// 
      /// Locales: Base
      static let invalidEmail = Rswift.StringResource(key: "invalidEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Invalid Password 
      /// 
      /// Locales: Base
      static let invaidPassword = Rswift.StringResource(key: "InvaidPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Is the first time you book a
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell2_SuareTextBook = Rswift.StringResource(key: "lbl_BookLastminOfferCell2_SuareTextBook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: LOCATION
      /// 
      /// Locales: Base
      static let lbl_FilterLocation = Rswift.StringResource(key: "lbl_FilterLocation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: LOCATION
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_Location = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Minute
      /// 
      /// Locales: Base
      static let lastMinute = Rswift.StringResource(key: "lastMinute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static let btn_MyAppointmentLastMintOffer = Rswift.StringResource(key: "btn_MyAppointmentLastMintOffer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static let lastMinuteOffer = Rswift.StringResource(key: "lastMinuteOffer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static let lbl_lastMintOffer = Rswift.StringResource(key: "lbl_lastMintOffer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Minutes
      /// 
      /// Locales: Base
      static let lastMinutes = Rswift.StringResource(key: "lastMinutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Name
      /// 
      /// Locales: Base
      static let lastName = Rswift.StringResource(key: "lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last Name
      /// 
      /// Locales: Base
      static let txtPlace_Register_LastName = Rswift.StringResource(key: "txtPlace_Register_LastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Last min Offer
      /// 
      /// Locales: Base
      static let lbl_LastMintOfferHeader = Rswift.StringResource(key: "lbl_LastMintOfferHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Latest
      /// 
      /// Locales: Base
      static let btn_MyAppointmentLatest = Rswift.StringResource(key: "btn_MyAppointmentLatest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Login
      /// 
      /// Locales: Base
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Login & Password
      /// 
      /// Locales: Base
      static let loginAndPassword = Rswift.StringResource(key: "loginAndPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Login In
      /// 
      /// Locales: Base
      static let lbl_Register_LoginIn = Rswift.StringResource(key: "lbl_Register_LoginIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Logout
      /// 
      /// Locales: Base
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Manage Employee
      /// 
      /// Locales: Base
      static let manageEmployee = Rswift.StringResource(key: "manageEmployee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Manage Picture
      /// 
      /// Locales: Base
      static let managePicture = Rswift.StringResource(key: "managePicture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Manage Program
      /// 
      /// Locales: Base
      static let manageProgram = Rswift.StringResource(key: "manageProgram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Manage Salon
      /// 
      /// Locales: Base, ro
      static let manageSalon = Rswift.StringResource(key: "manageSalon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Manage Services
      /// 
      /// Locales: Base
      static let manageService = Rswift.StringResource(key: "manageService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Message
      /// 
      /// Locales: Base
      static let btn_MyAppointmentCell_Message = Rswift.StringResource(key: "btn_MyAppointmentCell_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Message
      /// 
      /// Locales: Base
      static let lbl_MessageHeader = Rswift.StringResource(key: "lbl_MessageHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Modify
      /// 
      /// Locales: Base
      static let btn_MyAppointmentCell_Modify = Rswift.StringResource(key: "btn_MyAppointmentCell_Modify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Appointment
      /// 
      /// Locales: Base
      static let lbl_MyAppointment = Rswift.StringResource(key: "lbl_MyAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Appointment
      /// 
      /// Locales: Base
      static let lbl_MyAppointmentHeader = Rswift.StringResource(key: "lbl_MyAppointmentHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Favorite Salon
      /// 
      /// Locales: Base
      static let lbl_MyFavoriteSalon = Rswift.StringResource(key: "lbl_MyFavoriteSalon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static let lbl_MyProfile = Rswift.StringResource(key: "lbl_MyProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static let lbl_MyProfileHeader = Rswift.StringResource(key: "lbl_MyProfileHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: NORMAL PRICE
      /// 
      /// Locales: Base
      static let normalPrice = Rswift.StringResource(key: "normalPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Name
      /// 
      /// Locales: Base
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Name Individual / Artist
      /// 
      /// Locales: Base
      static let nameArtist = Rswift.StringResource(key: "nameArtist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Next
      /// 
      /// Locales: Base
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: No
      /// 
      /// Locales: Base
      static let comman_btn_No = Rswift.StringResource(key: "Comman_btn_No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: No Appointment Found
      /// 
      /// Locales: Base
      static let noAppointmentFound = Rswift.StringResource(key: "noAppointmentFound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Note
      /// 
      /// Locales: Base
      static let note = Rswift.StringResource(key: "note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Notifications
      /// 
      /// Locales: Base
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: OFFER PRICE
      /// 
      /// Locales: Base
      static let offerPrice = Rswift.StringResource(key: "offerPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: OUR TEAM
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_OurTeam = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_OurTeam", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Offers
      /// 
      /// Locales: Base
      static let btn_SalonDetail_Offers = Rswift.StringResource(key: "btn_SalonDetail_Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static let comman_btn_Ok = Rswift.StringResource(key: "Comman_btn_Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Open
      /// 
      /// Locales: Base
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Or
      /// 
      /// Locales: Base
      static let lbl_Register_Or = Rswift.StringResource(key: "lbl_Register_Or", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Other
      /// 
      /// Locales: Base
      static let lbl_Other = Rswift.StringResource(key: "lbl_Other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PRICE
      /// 
      /// Locales: Base
      static let lbl_FilterPrice = Rswift.StringResource(key: "lbl_FilterPrice", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PRICE
      /// 
      /// Locales: Base
      static let priceHeader = Rswift.StringResource(key: "priceHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PROFILE ACTIVITY
      /// 
      /// Locales: Base
      static let profileActivity = Rswift.StringResource(key: "profileActivity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PROGRAM
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_Program = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_Program", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: Base
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: Base
      static let txtPlace_Register_Password = Rswift.StringResource(key: "txtPlace_Register_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password Can't be blank! 
      /// 
      /// Locales: Base
      static let passwordCantBlank = Rswift.StringResource(key: "passwordCantBlank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Password should be minimum of 6 letters
      /// 
      /// Locales: Base
      static let msg_Minimumpasswordlenght = Rswift.StringResource(key: "msg_Minimumpasswordlenght", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Pay at Venue
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell3_PayVenue = Rswift.StringResource(key: "lbl_BookLastminOfferCell3_PayVenue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Pay with pay U
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell3_PayU = Rswift.StringResource(key: "lbl_BookLastminOfferCell3_PayU", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Payment
      /// 
      /// Locales: Base
      static let payment = Rswift.StringResource(key: "payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Personal
      /// 
      /// Locales: Base
      static let personal = Rswift.StringResource(key: "personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static let lbl_ContactusPhone = Rswift.StringResource(key: "lbl_ContactusPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static let txtPlace_Register_Phone = Rswift.StringResource(key: "txtPlace_Register_Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Phone No.
      /// 
      /// Locales: Base
      static let phoneNo = Rswift.StringResource(key: "phoneNo.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Pinterest Username
      /// 
      /// Locales: Base
      static let pinterestPlaceHolder = Rswift.StringResource(key: "pinterestPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Chhose Country. 
      /// 
      /// Locales: Base
      static let pleaseChooseCountry = Rswift.StringResource(key: "pleaseChooseCountry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Choose Professition. 
      /// 
      /// Locales: Base
      static let pleaseChooseProfession = Rswift.StringResource(key: "pleaseChooseProfession", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Enter Business URL. 
      /// 
      /// Locales: Base
      static let pleaseEnterBusinessURL = Rswift.StringResource(key: "pleaseEnterBusinessURL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Enter City 
      /// 
      /// Locales: Base
      static let pleaseEnterCity = Rswift.StringResource(key: "pleaseEnterCity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Enter Street Name. 
      /// 
      /// Locales: Base
      static let pleaseEnterStreetName = Rswift.StringResource(key: "pleaseEnterStreetName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please Enter Zip. 
      /// 
      /// Locales: Base
      static let pleaseEnterZip = Rswift.StringResource(key: "pleaseEnterZip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please add at least One day Program. 
      /// 
      /// Locales: Base
      static let pleaseAddAtLeastOneDayProgram = Rswift.StringResource(key: "pleaseAddAtLeastOneDayProgram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please add at least one Utility. 
      /// 
      /// Locales: Base
      static let pleaseAddSomeUtilities = Rswift.StringResource(key: "pleaseAddSomeUtilities", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please check your Internet Connection!
      /// 
      /// Locales: Base
      static let noInternet = Rswift.StringResource(key: "noInternet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please choose Profile picture. 
      /// 
      /// Locales: Base
      static let pleaseChooseImage = Rswift.StringResource(key: "pleaseChooseImage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter Email. 
      /// 
      /// Locales: Base
      static let pleaseEnterEmail = Rswift.StringResource(key: "pleaseEnterEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter First name. 
      /// 
      /// Locales: Base
      static let pleaseEnterFirstName = Rswift.StringResource(key: "pleaseEnterFirstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter Last name. 
      /// 
      /// Locales: Base
      static let pleaseEnterLastName = Rswift.StringResource(key: "pleaseEnterLastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter Notes. 
      /// 
      /// Locales: Base
      static let pleaseEnterNotes = Rswift.StringResource(key: "pleaseEnterNotes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter Phone. 
      /// 
      /// Locales: Base
      static let pleaseEnterPhone = Rswift.StringResource(key: "pleaseEnterPhone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter User type. 
      /// 
      /// Locales: Base
      static let pleaseSelectType = Rswift.StringResource(key: "pleaseSelectType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter confirm password
      /// 
      /// Locales: Base
      static let msg_Enterconfirmpassword = Rswift.StringResource(key: "msg_Enterconfirmpassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter email
      /// 
      /// Locales: Base
      static let msg_Enteremail = Rswift.StringResource(key: "msg_Enteremail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter first name
      /// 
      /// Locales: Base
      static let msg_Enterfirstname = Rswift.StringResource(key: "msg_Enterfirstname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter last name
      /// 
      /// Locales: Base
      static let msg_Enterlastname = Rswift.StringResource(key: "msg_Enterlastname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter password
      /// 
      /// Locales: Base
      static let msg_Enterpassword = Rswift.StringResource(key: "msg_Enterpassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter phone
      /// 
      /// Locales: Base
      static let msg_Enterphone = Rswift.StringResource(key: "msg_Enterphone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter salon Rules. 
      /// 
      /// Locales: Base
      static let pleaseAddSalonRules = Rswift.StringResource(key: "pleaseAddSalonRules", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter valid Email
      /// 
      /// Locales: Base
      static let pleaseEnterValidEmail = Rswift.StringResource(key: "pleaseEnterValidEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter valid email
      /// 
      /// Locales: Base
      static let msg_Entervalidemail = Rswift.StringResource(key: "msg_Entervalidemail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please enter valid name. 
      /// 
      /// Locales: Base
      static let pleaseEnterValidName = Rswift.StringResource(key: "pleaseEnterValidName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please select Gender. 
      /// 
      /// Locales: Base
      static let pleaseSelectGender = Rswift.StringResource(key: "pleaseSelectGender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Please select the Birthdate. 
      /// 
      /// Locales: Base
      static let pleaseSelectBirthdate = Rswift.StringResource(key: "pleaseSelectBirthdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Price
      /// 
      /// Locales: Base
      static let lbl_ConfirmBooking_Price = Rswift.StringResource(key: "lbl_ConfirmBooking_Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static let lbl_PrivacyPolicy = Rswift.StringResource(key: "lbl_PrivacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static let lbl_PrivacyPolicyHeader = Rswift.StringResource(key: "lbl_PrivacyPolicyHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static let privacyPolicy = Rswift.StringResource(key: "privacyPolicy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Profession
      /// 
      /// Locales: Base
      static let profession = Rswift.StringResource(key: "profession", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Profile
      /// 
      /// Locales: Base
      static let lbl_Profile = Rswift.StringResource(key: "lbl_Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Profile
      /// 
      /// Locales: Base
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Promocode
      /// 
      /// Locales: Base
      static let lbl_ConfirmBooking_Promocode = Rswift.StringResource(key: "lbl_ConfirmBooking_Promocode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: RULES FOR SALON
      /// 
      /// Locales: Base
      static let rulesForSalon = Rswift.StringResource(key: "rulesForSalon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Register
      /// 
      /// Locales: Base
      static let btn_Register = Rswift.StringResource(key: "btn_Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Register
      /// 
      /// Locales: Base
      static let register = Rswift.StringResource(key: "register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Report
      /// 
      /// Locales: Base, ro
      static let report = Rswift.StringResource(key: "report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Reports
      /// 
      /// Locales: Base
      static let reports = Rswift.StringResource(key: "reports", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Reshedule
      /// 
      /// Locales: Base
      static let btn_MyAppointmentCell_Reshedule = Rswift.StringResource(key: "btn_MyAppointmentCell_Reshedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Reviews
      /// 
      /// Locales: Base
      static let btn_SalonDetail_Reviews = Rswift.StringResource(key: "btn_SalonDetail_Reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SERVICE
      /// 
      /// Locales: Base
      static let serviceHeader = Rswift.StringResource(key: "serviceHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SMS COUNTER
      /// 
      /// Locales: Base
      static let smsCounter = Rswift.StringResource(key: "smsCounter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SMS Consumed
      /// 
      /// Locales: Base
      static let smsConsumed = Rswift.StringResource(key: "smsConsumed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SOCIAL MEDIA
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_SocialMedia = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_SocialMedia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SOCIAL MEDIA
      /// 
      /// Locales: Base
      static let socialMedia = Rswift.StringResource(key: "socialMedia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: STATISTICS
      /// 
      /// Locales: Base
      static let statistics = Rswift.StringResource(key: "statistics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SUB CATEGORY
      /// 
      /// Locales: Base
      static let subCategoryHeader = Rswift.StringResource(key: "subCategoryHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Salon
      /// 
      /// Locales: Base
      static let lbl_Salon = Rswift.StringResource(key: "lbl_Salon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Salon
      /// 
      /// Locales: Base
      static let salon = Rswift.StringResource(key: "salon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Salon List
      /// 
      /// Locales: Base
      static let lbl_SalonListHeader = Rswift.StringResource(key: "lbl_SalonListHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SalonX
      /// 
      /// Locales: Base
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SalonX
      /// 
      /// Locales: Base, ro
      static let salonx = Rswift.StringResource(key: "salonx", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ro"], comment: nil)
      /// Base translation: Save
      /// 
      /// Locales: Base
      static let comman_btn_Save = Rswift.StringResource(key: "Comman_btn_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Save
      /// 
      /// Locales: Base
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Search Clients...
      /// 
      /// Locales: Base
      static let searchClient = Rswift.StringResource(key: "searchClient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Search Salon, Professionist or Service
      /// 
      /// Locales: Base
      static let txtPlace_SearchSalonProfessionistorService = Rswift.StringResource(key: "txtPlace_SearchSalonProfessionistorService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Select Here
      /// 
      /// Locales: Base
      static let selectHere = Rswift.StringResource(key: "selectHere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Select Service
      /// 
      /// Locales: Base
      static let selectService = Rswift.StringResource(key: "selectService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Select Services
      /// 
      /// Locales: Base
      static let lbl_ServicesHeader = Rswift.StringResource(key: "lbl_ServicesHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Send
      /// 
      /// Locales: Base
      static let comman_btn_Send = Rswift.StringResource(key: "Comman_btn_Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Service
      /// 
      /// Locales: Base
      static let btn_PopMyAppointment_Service = Rswift.StringResource(key: "btn_PopMyAppointment_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Services
      /// 
      /// Locales: Base
      static let btn_SalonDetail_Services = Rswift.StringResource(key: "btn_SalonDetail_Services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Setting
      /// 
      /// Locales: Base
      static let setting = Rswift.StringResource(key: "setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sign up
      /// 
      /// Locales: Base
      static let signUp = Rswift.StringResource(key: "signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sign up as
      /// 
      /// Locales: Base
      static let lbl_Register_Signupas = Rswift.StringResource(key: "lbl_Register_Signupas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sign up as
      /// 
      /// Locales: Base
      static let signUpAs = Rswift.StringResource(key: "signUpAs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Something went wrong!
      /// 
      /// Locales: Base
      static let somethingWentWrong = Rswift.StringResource(key: "somethingWentWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Speciality
      /// 
      /// Locales: Base
      static let speciality = Rswift.StringResource(key: "speciality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Staff
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell1_Staff = Rswift.StringResource(key: "lbl_BookLastminOfferCell1_Staff", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Street
      /// 
      /// Locales: Base
      static let street = Rswift.StringResource(key: "street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Subject
      /// 
      /// Locales: Base
      static let lbl_ContactusSubject = Rswift.StringResource(key: "lbl_ContactusSubject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Submit
      /// 
      /// Locales: Base
      static let comman_btn_Submit = Rswift.StringResource(key: "Comman_btn_Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TOP SERVICES
      /// 
      /// Locales: Base
      static let topServices = Rswift.StringResource(key: "topServices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TOTAL
      /// 
      /// Locales: Base
      static let total = Rswift.StringResource(key: "total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TOTAL REVIEW
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_TotalReview = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_TotalReview", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base
      static let lbl_TermsAndConditionsHeader = Rswift.StringResource(key: "lbl_TermsAndConditionsHeader", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base
      static let lbl_TermsConditions = Rswift.StringResource(key: "lbl_TermsConditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Terms and Conditions
      /// 
      /// Locales: Base
      static let termnsAndCondition = Rswift.StringResource(key: "termnsAndCondition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Time
      /// 
      /// Locales: Base
      static let btn_PopMyAppointment_Time = Rswift.StringResource(key: "btn_PopMyAppointment_Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Total
      /// 
      /// Locales: Base
      static let lbl_BookLastminOfferCell1_Total = Rswift.StringResource(key: "lbl_BookLastminOfferCell1_Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Twitter Username
      /// 
      /// Locales: Base
      static let twitterPlaceHolder = Rswift.StringResource(key: "twitterPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Type
      /// 
      /// Locales: Base
      static let type = Rswift.StringResource(key: "type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Type here...
      /// 
      /// Locales: Base
      static let txtPlace_MessageType = Rswift.StringResource(key: "txtPlace_MessageType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: UTILITIES FOR SALON
      /// 
      /// Locales: Base
      static let utilityForSalon = Rswift.StringResource(key: "utilityForSalon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: UTILITY
      /// 
      /// Locales: Base
      static let lbl_SalonDetail_Reviews_Utility = Rswift.StringResource(key: "lbl_SalonDetail_Reviews_Utility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Upcoming
      /// 
      /// Locales: Base
      static let btn_MyAppointmentUpcoming = Rswift.StringResource(key: "btn_MyAppointmentUpcoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: User
      /// 
      /// Locales: Base
      static let user = Rswift.StringResource(key: "user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Views
      /// 
      /// Locales: Base
      static let views = Rswift.StringResource(key: "views", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Website Link
      /// 
      /// Locales: Base
      static let websiteLinkPlaceHolder = Rswift.StringResource(key: "websiteLinkPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Welcome to
      /// 
      /// Locales: Base
      static let lbl_welcome = Rswift.StringResource(key: "lbl_welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: What you want to modify at this appointment?
      /// 
      /// Locales: Base
      static let lbl_PopMyAppointment_ModifyAppointment = Rswift.StringResource(key: "lbl_PopMyAppointment_ModifyAppointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Whatapp Number
      /// 
      /// Locales: Base
      static let whatsAppPlaceHolder = Rswift.StringResource(key: "whatsAppPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Yes
      /// 
      /// Locales: Base
      static let comman_btn_Yes = Rswift.StringResource(key: "Comman_btn_Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Youtube URL
      /// 
      /// Locales: Base
      static let youtubePlaceHolder = Rswift.StringResource(key: "youtubePlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Zip
      /// 
      /// Locales: Base
      static let zip = Rswift.StringResource(key: "zip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: by
      /// 
      /// Locales: Base
      static let by = Rswift.StringResource(key: "by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: no records found
      /// 
      /// Locales: Base
      static let lbl_no_records_found = Rswift.StringResource(key: "lbl_no_records_found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: + View More
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_PlusViewMore(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_PlusViewMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: - View More
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_MinsViewMore(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_MinsViewMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: ADD UTILITIES
      /// 
      /// Locales: Base
      static func addUtility(_: Void = ()) -> String {
        return NSLocalizedString("addUtility", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: APPOINTMENT
      /// 
      /// Locales: Base
      static func appointmentHeader(_: Void = ()) -> String {
        return NSLocalizedString("appointmentHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: About Terms & Conditions
      /// 
      /// Locales: Base
      static func lbl_TermsAndConditionsTitleName(_: Void = ()) -> String {
        return NSLocalizedString("lbl_TermsAndConditionsTitleName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add
      /// 
      /// Locales: Base
      static func add(_: Void = ()) -> String {
        return NSLocalizedString("add", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add Appointment
      /// 
      /// Locales: Base
      static func addAppointment(_: Void = ()) -> String {
        return NSLocalizedString("addAppointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add Clients
      /// 
      /// Locales: Base
      static func addClient(_: Void = ()) -> String {
        return NSLocalizedString("addClient", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add Employee
      /// 
      /// Locales: Base
      static func addEmployee(_: Void = ()) -> String {
        return NSLocalizedString("addEmployee", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add Group
      /// 
      /// Locales: Base
      static func addGroup(_: Void = ()) -> String {
        return NSLocalizedString("addGroup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Add Service
      /// 
      /// Locales: Base
      static func addService(_: Void = ()) -> String {
        return NSLocalizedString("addService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Agenda
      /// 
      /// Locales: Base, ro
      static func agenda(_: Void = ()) -> String {
        return NSLocalizedString("agenda", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Already have an Account?
      /// 
      /// Locales: Base
      static func alreadyHaveAccount(_: Void = ()) -> String {
        return NSLocalizedString("alreadyHaveAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Already have an Account?
      /// 
      /// Locales: Base
      static func lbl_Register_AleradyHaveAccount(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Register_AleradyHaveAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Any message type here
      /// 
      /// Locales: Base
      static func txtPlace_BookLastminOfferCell2_Comment(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_BookLastminOfferCell2_Comment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Appointment
      /// 
      /// Locales: Base
      static func appointment(_: Void = ()) -> String {
        return NSLocalizedString("appointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Appointments
      /// 
      /// Locales: Base
      static func appointments(_: Void = ()) -> String {
        return NSLocalizedString("appointments", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Are you sure want to cancel this appointment?
      /// 
      /// Locales: Base
      static func lbl_PopMyAppointment_CancelAppointment(_: Void = ()) -> String {
        return NSLocalizedString("lbl_PopMyAppointment_CancelAppointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Are you sure? You want to logout.
      /// 
      /// Locales: Base
      static func areYouSureToLogout(_: Void = ()) -> String {
        return NSLocalizedString("areYouSureToLogout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Beauty Professional
      /// 
      /// Locales: Base
      static func lbl_Register_BeautyProfessional(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Register_BeautyProfessional", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Beauty Professionl
      /// 
      /// Locales: Base
      static func beatyProfessional(_: Void = ()) -> String {
        return NSLocalizedString("beatyProfessional", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Birthdate
      /// 
      /// Locales: Base
      static func birthdate(_: Void = ()) -> String {
        return NSLocalizedString("birthdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Blog
      /// 
      /// Locales: Base
      static func blog(_: Void = ()) -> String {
        return NSLocalizedString("blog", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Book Last Minute Offer
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Book Now
      /// 
      /// Locales: Base
      static func btn_BookLastminOfferCell_BookNow(_: Void = ()) -> String {
        return NSLocalizedString("btn_BookLastminOfferCell_BookNow", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Booking
      /// 
      /// Locales: Base
      static func lbl_BookingHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookingHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Business Type
      /// 
      /// Locales: Base
      static func businessType(_: Void = ()) -> String {
        return NSLocalizedString("businessType", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: CANCELATION POLICY
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell_CancelPolicy(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell_CancelPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: CATEGORY
      /// 
      /// Locales: Base
      static func categoryHeader(_: Void = ()) -> String {
        return NSLocalizedString("categoryHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func btn_MyAppointmentCell_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentCell_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func comman_btn_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: City
      /// 
      /// Locales: Base
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("city", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Client
      /// 
      /// Locales: Base, ro
      static func client(_: Void = ()) -> String {
        return NSLocalizedString("client", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Clients
      /// 
      /// Locales: Base
      static func clients(_: Void = ()) -> String {
        return NSLocalizedString("clients", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Close
      /// 
      /// Locales: Base
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("close", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Comments
      /// 
      /// Locales: Base
      static func lbl_ContactusComment(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusComment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm Booking
      /// 
      /// Locales: Base
      static func lbl_ConfirmBookingHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBookingHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm Password
      /// 
      /// Locales: Base
      static func confirmPasword(_: Void = ()) -> String {
        return NSLocalizedString("confirmPasword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm Password
      /// 
      /// Locales: Base
      static func txtPlace_Register_ConfirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_ConfirmPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Confirm password doesn't match your password
      /// 
      /// Locales: Base
      static func msg_Notmatchconfirmpassword(_: Void = ()) -> String {
        return NSLocalizedString("msg_Notmatchconfirmpassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Contact
      /// 
      /// Locales: Base
      static func contact(_: Void = ()) -> String {
        return NSLocalizedString("contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Contact
      /// 
      /// Locales: Base
      static func lbl_Contact(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Contact us
      /// 
      /// Locales: Base
      static func lbl_ContactusHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Continue with Facebook
      /// 
      /// Locales: Base
      static func btn_Register_Facebook(_: Void = ()) -> String {
        return NSLocalizedString("btn_Register_Facebook", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Continue with Facebook
      /// 
      /// Locales: Base
      static func continueWithFB(_: Void = ()) -> String {
        return NSLocalizedString("continueWithFB", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Country
      /// 
      /// Locales: Base
      static func country(_: Void = ()) -> String {
        return NSLocalizedString("country", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: DATE
      /// 
      /// Locales: Base
      static func lbl_FilterDate(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FilterDate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: DESCRIPTION
      /// 
      /// Locales: Base
      static func descriptionHeader(_: Void = ()) -> String {
        return NSLocalizedString("descriptionHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: DESCRIPTION
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell_Description(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell_Description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: DISCOUNT
      /// 
      /// Locales: Base
      static func dicount(_: Void = ()) -> String {
        return NSLocalizedString("dicount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: DURATION
      /// 
      /// Locales: Base
      static func durationHeader(_: Void = ()) -> String {
        return NSLocalizedString("durationHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Dashboard
      /// 
      /// Locales: Base, ro
      static func dashboard(_: Void = ()) -> String {
        return NSLocalizedString("dashboard", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Date
      /// 
      /// Locales: Base
      static func lbl_ConfirmBooking_Date(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBooking_Date", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Days
      /// 
      /// Locales: Base
      static func days(_: Void = ()) -> String {
        return NSLocalizedString("days", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Description
      /// 
      /// Locales: Base
      static func description(_: Void = ()) -> String {
        return NSLocalizedString("description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Discount
      /// 
      /// Locales: Base
      static func lbl_ConfirmBooking_Discount(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBooking_Discount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Do you have promocode?
      /// 
      /// Locales: Base
      static func lbl_Booking_Doyouhavepromocode(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Booking_Doyouhavepromocode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Dollers Booked
      /// 
      /// Locales: Base
      static func dollersBooked(_: Void = ()) -> String {
        return NSLocalizedString("dollersBooked", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Don't have an Account?
      /// 
      /// Locales: Base
      static func dontHaveAccount(_: Void = ()) -> String {
        return NSLocalizedString("dontHaveAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base
      static func comman_btn_Done(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Duration
      /// 
      /// Locales: Base
      static func lbl_ConfirmBooking_Duration(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBooking_Duration", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: EDIT SALON ADDRESS / PLACE WHERE YOU WORK
      /// 
      /// Locales: Base
      static func editSalonAddressHeader(_: Void = ()) -> String {
        return NSLocalizedString("editSalonAddressHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: EMPLOYEE
      /// 
      /// Locales: Base
      static func employeeHeader(_: Void = ()) -> String {
        return NSLocalizedString("employeeHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: EMPLOYEES
      /// 
      /// Locales: Base
      static func employees(_: Void = ()) -> String {
        return NSLocalizedString("employees", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit Extra Details
      /// 
      /// Locales: Base
      static func editExtraDetail(_: Void = ()) -> String {
        return NSLocalizedString("editExtraDetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit Profile
      /// 
      /// Locales: Base
      static func editProfile(_: Void = ()) -> String {
        return NSLocalizedString("editProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Edit Salon Detail
      /// 
      /// Locales: Base, ro
      static func editSalonDetail(_: Void = ()) -> String {
        return NSLocalizedString("editSalonDetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email
      /// 
      /// Locales: Base
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email
      /// 
      /// Locales: Base
      static func txtPlace_Register_Email(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_Email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email Can't be blank! 
      /// 
      /// Locales: Base
      static func enterEmailAddress(_: Void = ()) -> String {
        return NSLocalizedString("enterEmailAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email ID
      /// 
      /// Locales: Base
      static func emailID(_: Void = ()) -> String {
        return NSLocalizedString("emailID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Email ID
      /// 
      /// Locales: Base
      static func lbl_ContactusEmailID(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusEmailID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter Comments or query
      /// 
      /// Locales: Base
      static func txtPlace_ContactusComment(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_ContactusComment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter ID
      /// 
      /// Locales: Base
      static func txtPlace_ContactusEmailID(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_ContactusEmailID", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter Name
      /// 
      /// Locales: Base
      static func txtPlace_ContactusFullName(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_ContactusFullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter Phone
      /// 
      /// Locales: Base
      static func txtPlace_ContactusPhone(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_ContactusPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter Subject
      /// 
      /// Locales: Base
      static func txtPlace_ContactusSubject(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_ContactusSubject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Enter promocode here
      /// 
      /// Locales: Base
      static func txtPlace_Booking_Enterpromocodehere(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Booking_Enterpromocodehere", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Export Report
      /// 
      /// Locales: Base
      static func exportReport(_: Void = ()) -> String {
        return NSLocalizedString("exportReport", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Facebook Username
      /// 
      /// Locales: Base
      static func facebookPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("facebookPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Favorite
      /// 
      /// Locales: Base
      static func favorite(_: Void = ()) -> String {
        return NSLocalizedString("favorite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Favorite Salon
      /// 
      /// Locales: Base
      static func lbl_FavoriteSalonHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FavoriteSalonHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Fedback
      /// 
      /// Locales: Base
      static func btn_MyAppointmentCell_Fedback(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentCell_Fedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Filter
      /// 
      /// Locales: Base
      static func lbl_FilterHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FilterHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Find Salon / Service
      /// 
      /// Locales: Base
      static func lbl_FindSalonService(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FindSalonService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Finish Payment
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell3_FinishPayment(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell3_FinishPayment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Finished
      /// 
      /// Locales: Base
      static func finished(_: Void = ()) -> String {
        return NSLocalizedString("finished", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: First Name
      /// 
      /// Locales: Base
      static func firstName(_: Void = ()) -> String {
        return NSLocalizedString("firstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: First Name
      /// 
      /// Locales: Base
      static func txtPlace_Register_FirstName(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_FirstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Free SMS / monthly
      /// 
      /// Locales: Base
      static func freeSMS(_: Void = ()) -> String {
        return NSLocalizedString("freeSMS", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Full Name
      /// 
      /// Locales: Base
      static func lbl_ContactusFullName(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusFullName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: GENERAL
      /// 
      /// Locales: Base
      static func general(_: Void = ()) -> String {
        return NSLocalizedString("general", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: GROUP SERVICES
      /// 
      /// Locales: Base
      static func groupService(_: Void = ()) -> String {
        return NSLocalizedString("groupService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: GoolePlus Username
      /// 
      /// Locales: Base
      static func googlePlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("googlePlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Help
      /// 
      /// Locales: Base
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("help", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: I accept Terms and Conditions of SalonX
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell3_AcceptTNCSalon(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell3_AcceptTNCSalon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Info
      /// 
      /// Locales: Base
      static func btn_SalonDetail_Info(_: Void = ()) -> String {
        return NSLocalizedString("btn_SalonDetail_Info", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Instragram Username
      /// 
      /// Locales: Base
      static func instagramPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("instagramPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Invalid Email 
      /// 
      /// Locales: Base
      static func invalidEmail(_: Void = ()) -> String {
        return NSLocalizedString("invalidEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Invalid Password 
      /// 
      /// Locales: Base
      static func invaidPassword(_: Void = ()) -> String {
        return NSLocalizedString("InvaidPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Is the first time you book a
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell2_SuareTextBook(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell2_SuareTextBook", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: LOCATION
      /// 
      /// Locales: Base
      static func lbl_FilterLocation(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FilterLocation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: LOCATION
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_Location(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_Location", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Minute
      /// 
      /// Locales: Base
      static func lastMinute(_: Void = ()) -> String {
        return NSLocalizedString("lastMinute", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static func btn_MyAppointmentLastMintOffer(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentLastMintOffer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static func lastMinuteOffer(_: Void = ()) -> String {
        return NSLocalizedString("lastMinuteOffer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Minute Offer
      /// 
      /// Locales: Base
      static func lbl_lastMintOffer(_: Void = ()) -> String {
        return NSLocalizedString("lbl_lastMintOffer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Minutes
      /// 
      /// Locales: Base
      static func lastMinutes(_: Void = ()) -> String {
        return NSLocalizedString("lastMinutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Name
      /// 
      /// Locales: Base
      static func lastName(_: Void = ()) -> String {
        return NSLocalizedString("lastName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last Name
      /// 
      /// Locales: Base
      static func txtPlace_Register_LastName(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_LastName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Last min Offer
      /// 
      /// Locales: Base
      static func lbl_LastMintOfferHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_LastMintOfferHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Latest
      /// 
      /// Locales: Base
      static func btn_MyAppointmentLatest(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentLatest", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Login
      /// 
      /// Locales: Base
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Login & Password
      /// 
      /// Locales: Base
      static func loginAndPassword(_: Void = ()) -> String {
        return NSLocalizedString("loginAndPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Login In
      /// 
      /// Locales: Base
      static func lbl_Register_LoginIn(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Register_LoginIn", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Logout
      /// 
      /// Locales: Base
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Manage Employee
      /// 
      /// Locales: Base
      static func manageEmployee(_: Void = ()) -> String {
        return NSLocalizedString("manageEmployee", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Manage Picture
      /// 
      /// Locales: Base
      static func managePicture(_: Void = ()) -> String {
        return NSLocalizedString("managePicture", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Manage Program
      /// 
      /// Locales: Base
      static func manageProgram(_: Void = ()) -> String {
        return NSLocalizedString("manageProgram", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Manage Salon
      /// 
      /// Locales: Base, ro
      static func manageSalon(_: Void = ()) -> String {
        return NSLocalizedString("manageSalon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Manage Services
      /// 
      /// Locales: Base
      static func manageService(_: Void = ()) -> String {
        return NSLocalizedString("manageService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Message
      /// 
      /// Locales: Base
      static func btn_MyAppointmentCell_Message(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentCell_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Message
      /// 
      /// Locales: Base
      static func lbl_MessageHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MessageHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Modify
      /// 
      /// Locales: Base
      static func btn_MyAppointmentCell_Modify(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentCell_Modify", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Appointment
      /// 
      /// Locales: Base
      static func lbl_MyAppointment(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MyAppointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Appointment
      /// 
      /// Locales: Base
      static func lbl_MyAppointmentHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MyAppointmentHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Favorite Salon
      /// 
      /// Locales: Base
      static func lbl_MyFavoriteSalon(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MyFavoriteSalon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static func lbl_MyProfile(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MyProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: My Profile
      /// 
      /// Locales: Base
      static func lbl_MyProfileHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_MyProfileHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: NORMAL PRICE
      /// 
      /// Locales: Base
      static func normalPrice(_: Void = ()) -> String {
        return NSLocalizedString("normalPrice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Name
      /// 
      /// Locales: Base
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Name Individual / Artist
      /// 
      /// Locales: Base
      static func nameArtist(_: Void = ()) -> String {
        return NSLocalizedString("nameArtist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Next
      /// 
      /// Locales: Base
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: No
      /// 
      /// Locales: Base
      static func comman_btn_No(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_No", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: No Appointment Found
      /// 
      /// Locales: Base
      static func noAppointmentFound(_: Void = ()) -> String {
        return NSLocalizedString("noAppointmentFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Note
      /// 
      /// Locales: Base
      static func note(_: Void = ()) -> String {
        return NSLocalizedString("note", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Notifications
      /// 
      /// Locales: Base
      static func notifications(_: Void = ()) -> String {
        return NSLocalizedString("notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: OFFER PRICE
      /// 
      /// Locales: Base
      static func offerPrice(_: Void = ()) -> String {
        return NSLocalizedString("offerPrice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: OUR TEAM
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_OurTeam(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_OurTeam", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Offers
      /// 
      /// Locales: Base
      static func btn_SalonDetail_Offers(_: Void = ()) -> String {
        return NSLocalizedString("btn_SalonDetail_Offers", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Ok
      /// 
      /// Locales: Base
      static func comman_btn_Ok(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Open
      /// 
      /// Locales: Base
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("open", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Or
      /// 
      /// Locales: Base
      static func lbl_Register_Or(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Register_Or", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Other
      /// 
      /// Locales: Base
      static func lbl_Other(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Other", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: PRICE
      /// 
      /// Locales: Base
      static func lbl_FilterPrice(_: Void = ()) -> String {
        return NSLocalizedString("lbl_FilterPrice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: PRICE
      /// 
      /// Locales: Base
      static func priceHeader(_: Void = ()) -> String {
        return NSLocalizedString("priceHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: PROFILE ACTIVITY
      /// 
      /// Locales: Base
      static func profileActivity(_: Void = ()) -> String {
        return NSLocalizedString("profileActivity", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: PROGRAM
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_Program(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_Program", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: Base
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: Base
      static func txtPlace_Register_Password(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password Can't be blank! 
      /// 
      /// Locales: Base
      static func passwordCantBlank(_: Void = ()) -> String {
        return NSLocalizedString("passwordCantBlank", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Password should be minimum of 6 letters
      /// 
      /// Locales: Base
      static func msg_Minimumpasswordlenght(_: Void = ()) -> String {
        return NSLocalizedString("msg_Minimumpasswordlenght", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Pay at Venue
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell3_PayVenue(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell3_PayVenue", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Pay with pay U
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell3_PayU(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell3_PayU", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Payment
      /// 
      /// Locales: Base
      static func payment(_: Void = ()) -> String {
        return NSLocalizedString("payment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Personal
      /// 
      /// Locales: Base
      static func personal(_: Void = ()) -> String {
        return NSLocalizedString("personal", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static func lbl_ContactusPhone(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static func phone(_: Void = ()) -> String {
        return NSLocalizedString("phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Phone
      /// 
      /// Locales: Base
      static func txtPlace_Register_Phone(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_Register_Phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Phone No.
      /// 
      /// Locales: Base
      static func phoneNo(_: Void = ()) -> String {
        return NSLocalizedString("phoneNo.", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Pinterest Username
      /// 
      /// Locales: Base
      static func pinterestPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("pinterestPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Chhose Country. 
      /// 
      /// Locales: Base
      static func pleaseChooseCountry(_: Void = ()) -> String {
        return NSLocalizedString("pleaseChooseCountry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Choose Professition. 
      /// 
      /// Locales: Base
      static func pleaseChooseProfession(_: Void = ()) -> String {
        return NSLocalizedString("pleaseChooseProfession", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Enter Business URL. 
      /// 
      /// Locales: Base
      static func pleaseEnterBusinessURL(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterBusinessURL", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Enter City 
      /// 
      /// Locales: Base
      static func pleaseEnterCity(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterCity", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Enter Street Name. 
      /// 
      /// Locales: Base
      static func pleaseEnterStreetName(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterStreetName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please Enter Zip. 
      /// 
      /// Locales: Base
      static func pleaseEnterZip(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterZip", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please add at least One day Program. 
      /// 
      /// Locales: Base
      static func pleaseAddAtLeastOneDayProgram(_: Void = ()) -> String {
        return NSLocalizedString("pleaseAddAtLeastOneDayProgram", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please add at least one Utility. 
      /// 
      /// Locales: Base
      static func pleaseAddSomeUtilities(_: Void = ()) -> String {
        return NSLocalizedString("pleaseAddSomeUtilities", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please check your Internet Connection!
      /// 
      /// Locales: Base
      static func noInternet(_: Void = ()) -> String {
        return NSLocalizedString("noInternet", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please choose Profile picture. 
      /// 
      /// Locales: Base
      static func pleaseChooseImage(_: Void = ()) -> String {
        return NSLocalizedString("pleaseChooseImage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter Email. 
      /// 
      /// Locales: Base
      static func pleaseEnterEmail(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter First name. 
      /// 
      /// Locales: Base
      static func pleaseEnterFirstName(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterFirstName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter Last name. 
      /// 
      /// Locales: Base
      static func pleaseEnterLastName(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterLastName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter Notes. 
      /// 
      /// Locales: Base
      static func pleaseEnterNotes(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterNotes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter Phone. 
      /// 
      /// Locales: Base
      static func pleaseEnterPhone(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterPhone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter User type. 
      /// 
      /// Locales: Base
      static func pleaseSelectType(_: Void = ()) -> String {
        return NSLocalizedString("pleaseSelectType", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter confirm password
      /// 
      /// Locales: Base
      static func msg_Enterconfirmpassword(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enterconfirmpassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter email
      /// 
      /// Locales: Base
      static func msg_Enteremail(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enteremail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter first name
      /// 
      /// Locales: Base
      static func msg_Enterfirstname(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enterfirstname", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter last name
      /// 
      /// Locales: Base
      static func msg_Enterlastname(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enterlastname", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter password
      /// 
      /// Locales: Base
      static func msg_Enterpassword(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enterpassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter phone
      /// 
      /// Locales: Base
      static func msg_Enterphone(_: Void = ()) -> String {
        return NSLocalizedString("msg_Enterphone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter salon Rules. 
      /// 
      /// Locales: Base
      static func pleaseAddSalonRules(_: Void = ()) -> String {
        return NSLocalizedString("pleaseAddSalonRules", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter valid Email
      /// 
      /// Locales: Base
      static func pleaseEnterValidEmail(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterValidEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter valid email
      /// 
      /// Locales: Base
      static func msg_Entervalidemail(_: Void = ()) -> String {
        return NSLocalizedString("msg_Entervalidemail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please enter valid name. 
      /// 
      /// Locales: Base
      static func pleaseEnterValidName(_: Void = ()) -> String {
        return NSLocalizedString("pleaseEnterValidName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please select Gender. 
      /// 
      /// Locales: Base
      static func pleaseSelectGender(_: Void = ()) -> String {
        return NSLocalizedString("pleaseSelectGender", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Please select the Birthdate. 
      /// 
      /// Locales: Base
      static func pleaseSelectBirthdate(_: Void = ()) -> String {
        return NSLocalizedString("pleaseSelectBirthdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Price
      /// 
      /// Locales: Base
      static func lbl_ConfirmBooking_Price(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBooking_Price", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static func lbl_PrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("lbl_PrivacyPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static func lbl_PrivacyPolicyHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_PrivacyPolicyHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Privacy Policy
      /// 
      /// Locales: Base
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("privacyPolicy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Profession
      /// 
      /// Locales: Base
      static func profession(_: Void = ()) -> String {
        return NSLocalizedString("profession", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Profile
      /// 
      /// Locales: Base
      static func lbl_Profile(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Profile
      /// 
      /// Locales: Base
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Promocode
      /// 
      /// Locales: Base
      static func lbl_ConfirmBooking_Promocode(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ConfirmBooking_Promocode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: RULES FOR SALON
      /// 
      /// Locales: Base
      static func rulesForSalon(_: Void = ()) -> String {
        return NSLocalizedString("rulesForSalon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Register
      /// 
      /// Locales: Base
      static func btn_Register(_: Void = ()) -> String {
        return NSLocalizedString("btn_Register", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Register
      /// 
      /// Locales: Base
      static func register(_: Void = ()) -> String {
        return NSLocalizedString("register", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Report
      /// 
      /// Locales: Base, ro
      static func report(_: Void = ()) -> String {
        return NSLocalizedString("report", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Reports
      /// 
      /// Locales: Base
      static func reports(_: Void = ()) -> String {
        return NSLocalizedString("reports", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Reshedule
      /// 
      /// Locales: Base
      static func btn_MyAppointmentCell_Reshedule(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentCell_Reshedule", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Reviews
      /// 
      /// Locales: Base
      static func btn_SalonDetail_Reviews(_: Void = ()) -> String {
        return NSLocalizedString("btn_SalonDetail_Reviews", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SERVICE
      /// 
      /// Locales: Base
      static func serviceHeader(_: Void = ()) -> String {
        return NSLocalizedString("serviceHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SMS COUNTER
      /// 
      /// Locales: Base
      static func smsCounter(_: Void = ()) -> String {
        return NSLocalizedString("smsCounter", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SMS Consumed
      /// 
      /// Locales: Base
      static func smsConsumed(_: Void = ()) -> String {
        return NSLocalizedString("smsConsumed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SOCIAL MEDIA
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_SocialMedia(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_SocialMedia", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SOCIAL MEDIA
      /// 
      /// Locales: Base
      static func socialMedia(_: Void = ()) -> String {
        return NSLocalizedString("socialMedia", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: STATISTICS
      /// 
      /// Locales: Base
      static func statistics(_: Void = ()) -> String {
        return NSLocalizedString("statistics", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SUB CATEGORY
      /// 
      /// Locales: Base
      static func subCategoryHeader(_: Void = ()) -> String {
        return NSLocalizedString("subCategoryHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Salon
      /// 
      /// Locales: Base
      static func lbl_Salon(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Salon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Salon
      /// 
      /// Locales: Base
      static func salon(_: Void = ()) -> String {
        return NSLocalizedString("salon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Salon List
      /// 
      /// Locales: Base
      static func lbl_SalonListHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonListHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SalonX
      /// 
      /// Locales: Base
      static func alert(_: Void = ()) -> String {
        return NSLocalizedString("Alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: SalonX
      /// 
      /// Locales: Base, ro
      static func salonx(_: Void = ()) -> String {
        return NSLocalizedString("salonx", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Save
      /// 
      /// Locales: Base
      static func comman_btn_Save(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Save
      /// 
      /// Locales: Base
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Search Clients...
      /// 
      /// Locales: Base
      static func searchClient(_: Void = ()) -> String {
        return NSLocalizedString("searchClient", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Search Salon, Professionist or Service
      /// 
      /// Locales: Base
      static func txtPlace_SearchSalonProfessionistorService(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_SearchSalonProfessionistorService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Select Here
      /// 
      /// Locales: Base
      static func selectHere(_: Void = ()) -> String {
        return NSLocalizedString("selectHere", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Select Service
      /// 
      /// Locales: Base
      static func selectService(_: Void = ()) -> String {
        return NSLocalizedString("selectService", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Select Services
      /// 
      /// Locales: Base
      static func lbl_ServicesHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ServicesHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Send
      /// 
      /// Locales: Base
      static func comman_btn_Send(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Send", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Service
      /// 
      /// Locales: Base
      static func btn_PopMyAppointment_Service(_: Void = ()) -> String {
        return NSLocalizedString("btn_PopMyAppointment_Service", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Services
      /// 
      /// Locales: Base
      static func btn_SalonDetail_Services(_: Void = ()) -> String {
        return NSLocalizedString("btn_SalonDetail_Services", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Setting
      /// 
      /// Locales: Base
      static func setting(_: Void = ()) -> String {
        return NSLocalizedString("setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sign up
      /// 
      /// Locales: Base
      static func signUp(_: Void = ()) -> String {
        return NSLocalizedString("signUp", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sign up as
      /// 
      /// Locales: Base
      static func lbl_Register_Signupas(_: Void = ()) -> String {
        return NSLocalizedString("lbl_Register_Signupas", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sign up as
      /// 
      /// Locales: Base
      static func signUpAs(_: Void = ()) -> String {
        return NSLocalizedString("signUpAs", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Something went wrong!
      /// 
      /// Locales: Base
      static func somethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("somethingWentWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Speciality
      /// 
      /// Locales: Base
      static func speciality(_: Void = ()) -> String {
        return NSLocalizedString("speciality", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Staff
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell1_Staff(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell1_Staff", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Street
      /// 
      /// Locales: Base
      static func street(_: Void = ()) -> String {
        return NSLocalizedString("street", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Subject
      /// 
      /// Locales: Base
      static func lbl_ContactusSubject(_: Void = ()) -> String {
        return NSLocalizedString("lbl_ContactusSubject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Submit
      /// 
      /// Locales: Base
      static func comman_btn_Submit(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: TOP SERVICES
      /// 
      /// Locales: Base
      static func topServices(_: Void = ()) -> String {
        return NSLocalizedString("topServices", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: TOTAL
      /// 
      /// Locales: Base
      static func total(_: Void = ()) -> String {
        return NSLocalizedString("total", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: TOTAL REVIEW
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_TotalReview(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_TotalReview", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base
      static func lbl_TermsAndConditionsHeader(_: Void = ()) -> String {
        return NSLocalizedString("lbl_TermsAndConditionsHeader", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Terms & Conditions
      /// 
      /// Locales: Base
      static func lbl_TermsConditions(_: Void = ()) -> String {
        return NSLocalizedString("lbl_TermsConditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Terms and Conditions
      /// 
      /// Locales: Base
      static func termnsAndCondition(_: Void = ()) -> String {
        return NSLocalizedString("termnsAndCondition", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Time
      /// 
      /// Locales: Base
      static func btn_PopMyAppointment_Time(_: Void = ()) -> String {
        return NSLocalizedString("btn_PopMyAppointment_Time", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Total
      /// 
      /// Locales: Base
      static func lbl_BookLastminOfferCell1_Total(_: Void = ()) -> String {
        return NSLocalizedString("lbl_BookLastminOfferCell1_Total", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Twitter Username
      /// 
      /// Locales: Base
      static func twitterPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("twitterPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Type
      /// 
      /// Locales: Base
      static func type(_: Void = ()) -> String {
        return NSLocalizedString("type", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Type here...
      /// 
      /// Locales: Base
      static func txtPlace_MessageType(_: Void = ()) -> String {
        return NSLocalizedString("txtPlace_MessageType", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: UTILITIES FOR SALON
      /// 
      /// Locales: Base
      static func utilityForSalon(_: Void = ()) -> String {
        return NSLocalizedString("utilityForSalon", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: UTILITY
      /// 
      /// Locales: Base
      static func lbl_SalonDetail_Reviews_Utility(_: Void = ()) -> String {
        return NSLocalizedString("lbl_SalonDetail_Reviews_Utility", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Upcoming
      /// 
      /// Locales: Base
      static func btn_MyAppointmentUpcoming(_: Void = ()) -> String {
        return NSLocalizedString("btn_MyAppointmentUpcoming", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: User
      /// 
      /// Locales: Base
      static func user(_: Void = ()) -> String {
        return NSLocalizedString("user", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Views
      /// 
      /// Locales: Base
      static func views(_: Void = ()) -> String {
        return NSLocalizedString("views", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Website Link
      /// 
      /// Locales: Base
      static func websiteLinkPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("websiteLinkPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Welcome to
      /// 
      /// Locales: Base
      static func lbl_welcome(_: Void = ()) -> String {
        return NSLocalizedString("lbl_welcome", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: What you want to modify at this appointment?
      /// 
      /// Locales: Base
      static func lbl_PopMyAppointment_ModifyAppointment(_: Void = ()) -> String {
        return NSLocalizedString("lbl_PopMyAppointment_ModifyAppointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Whatapp Number
      /// 
      /// Locales: Base
      static func whatsAppPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("whatsAppPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Yes
      /// 
      /// Locales: Base
      static func comman_btn_Yes(_: Void = ()) -> String {
        return NSLocalizedString("Comman_btn_Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Youtube URL
      /// 
      /// Locales: Base
      static func youtubePlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("youtubePlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Zip
      /// 
      /// Locales: Base
      static func zip(_: Void = ()) -> String {
        return NSLocalizedString("zip", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: by
      /// 
      /// Locales: Base
      static func by(_: Void = ()) -> String {
        return NSLocalizedString("by", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: no records found
      /// 
      /// Locales: Base
      static func lbl_no_records_found(_: Void = ()) -> String {
        return NSLocalizedString("lbl_no_records_found", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 16 localization keys.
    struct main {
      /// ro translation: Beauty Professional
      /// 
      /// Locales: ro
      static let wvPRzVFDNormalTitle = Rswift.StringResource(key: "WvP-Rz-vFD.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Blog
      /// 
      /// Locales: ro
      static let dM6YDQYWText = Rswift.StringResource(key: "DM6-YD-qYW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Button
      /// 
      /// Locales: ro
      static let j0FIOw7NormalTitle = Rswift.StringResource(key: "2J0-fI-Ow7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Contact
      /// 
      /// Locales: ro
      static let inCiUlOText = Rswift.StringResource(key: "5In-ci-ulO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Don't have an Account?
      /// 
      /// Locales: ro
      static let g2h71GhpText = Rswift.StringResource(key: "g2h-71-ghp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Email
      /// 
      /// Locales: ro
      static let tXzMcFbfPlaceholder = Rswift.StringResource(key: "TXz-mc-fbf.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Help
      /// 
      /// Locales: ro
      static let f5zYAWDSText = Rswift.StringResource(key: "F5z-yA-WDS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Login
      /// 
      /// Locales: ro
      static let dBc6vFKtNormalTitle = Rswift.StringResource(key: "dBc-6v-fKt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Login & Password
      /// 
      /// Locales: ro
      static let qb6R4F9wText = Rswift.StringResource(key: "qb6-r4-F9w.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Logout
      /// 
      /// Locales: ro
      static let qoZaGgLText = Rswift.StringResource(key: "3qo-Za-ggL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Or
      /// 
      /// Locales: ro
      static let sB3QnIaaText = Rswift.StringResource(key: "sB3-qn-iaa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Password
      /// 
      /// Locales: ro
      static let sARW51LOPlaceholder = Rswift.StringResource(key: "SAR-W5-1LO.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Privacy Policy
      /// 
      /// Locales: ro
      static let e6IMHB0pText = Rswift.StringResource(key: "E6I-mH-b0p.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Sign up
      /// 
      /// Locales: ro
      static let qphQDKy7NormalTitle = Rswift.StringResource(key: "qph-QD-ky7.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Sign up as
      /// 
      /// Locales: ro
      static let tJdACLt1Text = Rswift.StringResource(key: "tJd-aC-lt1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      /// ro translation: Terms and Conditions
      /// 
      /// Locales: ro
      static let fjSIOH76Text = Rswift.StringResource(key: "FjS-IO-h76.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ro"], comment: nil)
      
      /// ro translation: Beauty Professional
      /// 
      /// Locales: ro
      static func wvPRzVFDNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("WvP-Rz-vFD.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Blog
      /// 
      /// Locales: ro
      static func dM6YDQYWText(_: Void = ()) -> String {
        return NSLocalizedString("DM6-YD-qYW.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Button
      /// 
      /// Locales: ro
      static func j0FIOw7NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("2J0-fI-Ow7.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Contact
      /// 
      /// Locales: ro
      static func inCiUlOText(_: Void = ()) -> String {
        return NSLocalizedString("5In-ci-ulO.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Don't have an Account?
      /// 
      /// Locales: ro
      static func g2h71GhpText(_: Void = ()) -> String {
        return NSLocalizedString("g2h-71-ghp.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Email
      /// 
      /// Locales: ro
      static func tXzMcFbfPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("TXz-mc-fbf.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Help
      /// 
      /// Locales: ro
      static func f5zYAWDSText(_: Void = ()) -> String {
        return NSLocalizedString("F5z-yA-WDS.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Login
      /// 
      /// Locales: ro
      static func dBc6vFKtNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("dBc-6v-fKt.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Login & Password
      /// 
      /// Locales: ro
      static func qb6R4F9wText(_: Void = ()) -> String {
        return NSLocalizedString("qb6-r4-F9w.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Logout
      /// 
      /// Locales: ro
      static func qoZaGgLText(_: Void = ()) -> String {
        return NSLocalizedString("3qo-Za-ggL.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Or
      /// 
      /// Locales: ro
      static func sB3QnIaaText(_: Void = ()) -> String {
        return NSLocalizedString("sB3-qn-iaa.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Password
      /// 
      /// Locales: ro
      static func sARW51LOPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("SAR-W5-1LO.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Privacy Policy
      /// 
      /// Locales: ro
      static func e6IMHB0pText(_: Void = ()) -> String {
        return NSLocalizedString("E6I-mH-b0p.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Sign up
      /// 
      /// Locales: ro
      static func qphQDKy7NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("qph-QD-ky7.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Sign up as
      /// 
      /// Locales: ro
      static func tJdACLt1Text(_: Void = ()) -> String {
        return NSLocalizedString("tJd-aC-lt1.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ro translation: Terms and Conditions
      /// 
      /// Locales: ro
      static func fjSIOH76Text(_: Void = ()) -> String {
        return NSLocalizedString("FjS-IO-h76.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.webUrl` struct is generated, and contains static references to 22 localization keys.
    struct webUrl {
      /// Value: http://52.66.6.178/salonx/api/
      static let baseUrl = Rswift.StringResource(key: "baseUrl", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/categories_list
      static let categoryList = Rswift.StringResource(key: "categoryList", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/country_list
      static let countryList = Rswift.StringResource(key: "countryList", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/delete_utilities
      static let deleteUtilityURL = Rswift.StringResource(key: "deleteUtilityURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/employee_agenda_listable
      static let employeeListableURL = Rswift.StringResource(key: "employeeListableURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/group_list
      static let groupListURL = Rswift.StringResource(key: "groupListURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/last_minute_offer
      static let lastMinuteOfferURL = Rswift.StringResource(key: "lastMinuteOfferURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/manage_employees
      static let manageEmployeeURL = Rswift.StringResource(key: "manageEmployeeURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/manage_salon_program
      static let manageProgramURL = Rswift.StringResource(key: "manageProgramURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/manage_service
      static let manageService = Rswift.StringResource(key: "manageService", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/profession_list
      static let professionListURL = Rswift.StringResource(key: "professionListURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/register
      static let salonSignUp = Rswift.StringResource(key: "salonSignUp", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/salon_agenda
      static let salonAgendaURL = Rswift.StringResource(key: "salonAgendaURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/salon_agenda_appointments
      static let salonAgendaAppointmentURL = Rswift.StringResource(key: "salonAgendaAppointmentURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/salon_client
      static let clientURL = Rswift.StringResource(key: "clientURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/save_extra_details
      static let saveExtraDetail = Rswift.StringResource(key: "saveExtraDetail", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/save_salon_details
      static let saveSalonDetailURL = Rswift.StringResource(key: "saveSalonDetailURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/save_salon_pictures
      static let saveSalonPictureURL = Rswift.StringResource(key: "saveSalonPictureURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/search_clients
      static let searchClient = Rswift.StringResource(key: "searchClient", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: salon/service_list
      static let salonServiceListURL = Rswift.StringResource(key: "salonServiceListURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: user/login
      static let login = Rswift.StringResource(key: "login", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: user/logout
      static let logoutURL = Rswift.StringResource(key: "logoutURL", tableName: "WebUrl", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: http://52.66.6.178/salonx/api/
      static func baseUrl(_: Void = ()) -> String {
        return NSLocalizedString("baseUrl", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/categories_list
      static func categoryList(_: Void = ()) -> String {
        return NSLocalizedString("categoryList", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/country_list
      static func countryList(_: Void = ()) -> String {
        return NSLocalizedString("countryList", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/delete_utilities
      static func deleteUtilityURL(_: Void = ()) -> String {
        return NSLocalizedString("deleteUtilityURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/employee_agenda_listable
      static func employeeListableURL(_: Void = ()) -> String {
        return NSLocalizedString("employeeListableURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/group_list
      static func groupListURL(_: Void = ()) -> String {
        return NSLocalizedString("groupListURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/last_minute_offer
      static func lastMinuteOfferURL(_: Void = ()) -> String {
        return NSLocalizedString("lastMinuteOfferURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/manage_employees
      static func manageEmployeeURL(_: Void = ()) -> String {
        return NSLocalizedString("manageEmployeeURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/manage_salon_program
      static func manageProgramURL(_: Void = ()) -> String {
        return NSLocalizedString("manageProgramURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/manage_service
      static func manageService(_: Void = ()) -> String {
        return NSLocalizedString("manageService", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/profession_list
      static func professionListURL(_: Void = ()) -> String {
        return NSLocalizedString("professionListURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/register
      static func salonSignUp(_: Void = ()) -> String {
        return NSLocalizedString("salonSignUp", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/salon_agenda
      static func salonAgendaURL(_: Void = ()) -> String {
        return NSLocalizedString("salonAgendaURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/salon_agenda_appointments
      static func salonAgendaAppointmentURL(_: Void = ()) -> String {
        return NSLocalizedString("salonAgendaAppointmentURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/salon_client
      static func clientURL(_: Void = ()) -> String {
        return NSLocalizedString("clientURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/save_extra_details
      static func saveExtraDetail(_: Void = ()) -> String {
        return NSLocalizedString("saveExtraDetail", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/save_salon_details
      static func saveSalonDetailURL(_: Void = ()) -> String {
        return NSLocalizedString("saveSalonDetailURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/save_salon_pictures
      static func saveSalonPictureURL(_: Void = ()) -> String {
        return NSLocalizedString("saveSalonPictureURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/search_clients
      static func searchClient(_: Void = ()) -> String {
        return NSLocalizedString("searchClient", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: salon/service_list
      static func salonServiceListURL(_: Void = ()) -> String {
        return NSLocalizedString("salonServiceListURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: user/login
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: user/logout
      static func logoutURL(_: Void = ()) -> String {
        return NSLocalizedString("logoutURL", tableName: "WebUrl", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddEmployeeVC.validate()
      try _LastMintOfferDetailCell.validate()
      try _EditExtraDetailVC.validate()
      try _ContactusCell1.validate()
      try _MyProfileVC.validate()
      try _PersonalVC.validate()
      try _LastMinuteOfferVC.validate()
      try _DashbaordCell.validate()
      try _AfterCheckoutVC.validate()
      try _HomeHeaderCell.validate()
      try _BookingCell.validate()
      try _BookingPaymentCells.validate()
      try _ManageProgramVC.validate()
      try _SalonDetailInfoHeaderCell.validate()
      try _AddClientVC.validate()
      try _LastMinuteOfferDetailVC.validate()
      try _NewAppointmentVC.validate()
      try _ServiceCell.validate()
      try _ForgotPasswordVC.validate()
      try _LeftMenuCell.validate()
      try _ManageProgramCell.validate()
      try _SignupVC.validate()
      try _LoginVC.validate()
      try _FilterSubCategoryCell.validate()
      try _LastMinuteOfferCell.validate()
      try _SalonDashboard.validate()
      try _ServiceHeaderCell.validate()
      try _ContactusCell.validate()
      try _NotificationCell.validate()
      try _HomeSearchResultSubCell.validate()
      try _SalonPictureCell.validate()
      try _MyAppointmentHeaderCell.validate()
      try _HomeCell.validate()
      try _SalonDetailReviewCell.validate()
      try _SalonSignupVC.validate()
      try _EditSalonDetailVC.validate()
      try _ClientDetailVC.validate()
      try _AppointmentDetailVC.validate()
      try _MyFavoriteCell.validate()
      try _AddAppointmentVC.validate()
      try _ClientListCell.validate()
      try _LastMintOfferBookCell2.validate()
      try _FilterCells.validate()
      try _MessageRecieverCell.validate()
      try _HomeVC.validate()
      try _SalonDetailInfoTeamCollectionCell.validate()
      try _MessageSenderCell.validate()
      try _ServicesCell.validate()
      try _SalonDetailInfoSocialCell.validate()
      try _HomeSearchVC.validate()
      try _AddServiceVC.validate()
      try _SalonDetailVC.validate()
      try _ServiceItemCell.validate()
      try _LastMintOfferBookCell3.validate()
      try _BookingVC.validate()
      try _ManageOptionCell.validate()
      try _EmployeeCell.validate()
      try _LastMintOfferCell.validate()
      try _LeftMenuVC.validate()
    }
    
    struct _AddAppointmentVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddAppointmentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_dark_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_dark_gray' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_color_picker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_color_picker' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'AddAppointmentVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddClientVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddClientVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'AddClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'AddClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender_gray' is used in nib 'AddClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "add_client_photo_placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_client_photo_placeholder' is used in nib 'AddClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'AddClientVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'AddClientVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddEmployeeVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddEmployeeVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "add_client_photo_placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'add_client_photo_placeholder' is used in nib 'AddEmployeeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'AddEmployeeVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'AddEmployeeVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddGroupPopupView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddGroupPopupView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AddServiceVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddServiceVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'AddServiceVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'AddServiceVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'AddServiceVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AfterCheckoutVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AfterCheckoutVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_dark_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_dark_gray' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_message_display") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_message_display' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'AfterCheckoutVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AppointmentDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppointmentDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_dark_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_dark_gray' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_message_display") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_message_display' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'AppointmentDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookingCell
      
      let bundle = R.hostingBundle
      let identifier = "BookingCell"
      let name = "BookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_listing_salon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_listing_salon' is used in nib 'BookingCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BookingPaymentCells: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookingPaymentCells
      
      let bundle = R.hostingBundle
      let identifier = "BookingPaymentCells"
      let name = "BookingPaymentCells"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookingPaymentCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingPaymentCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_employee_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_employee_blue' is used in nib 'BookingPaymentCells', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BookingPaymentPromocodeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BookingPaymentCells
      
      let bundle = R.hostingBundle
      let identifier = "BookingPaymentPromocodeCell"
      let name = "BookingPaymentPromocodeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookingPaymentCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingPaymentCells
      }
      
      fileprivate init() {}
    }
    
    struct _BookingPaymentVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookingPaymentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _BookingTimeSlotCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BookingTimeSlotCell
      
      let bundle = R.hostingBundle
      let identifier = "BookingTimeSlotCell"
      let name = "BookingTimeSlotCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookingTimeSlotCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingTimeSlotCell
      }
      
      fileprivate init() {}
    }
    
    struct _BookingVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BookingVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'BookingVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender_gray' is used in nib 'BookingVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'BookingVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'BookingVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_employee_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_employee_blue' is used in nib 'BookingVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ClientAppointmentListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ClientAppointmentListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClientAppointmentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClientAppointmentTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ClientDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ClientDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_unselected_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_unselected_right' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_selected_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_selected_right' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_unselected_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_unselected_left' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_selected_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_selected_left' is used in nib 'ClientDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ClientListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ClientListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClientListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClientListTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'ClientListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_forward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_forward' is used in nib 'ClientListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ClientListCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ColorPickerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorPickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ConfirmBookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ConfirmBookingCell
      
      let bundle = R.hostingBundle
      let identifier = "ConfirmBookingCell"
      let name = "ConfirmBookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ConfirmBookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConfirmBookingCell
      }
      
      fileprivate init() {}
    }
    
    struct _ConfirmBookingVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConfirmBookingVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Contactus: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Contactus"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ContactusCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContactusCell
      
      let bundle = R.hostingBundle
      let identifier = "Cell2"
      let name = "ContactusCell1"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContactusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactusCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ContactusCell1', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ContactusCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContactusCell
      
      let bundle = R.hostingBundle
      let identifier = "Cell3"
      let name = "ContactusCell2"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContactusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactusCell
      }
      
      fileprivate init() {}
    }
    
    struct _ContactusCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ContactusCell
      
      let bundle = R.hostingBundle
      let identifier = "Cell1"
      let name = "ContactusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContactusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactusCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_message_contact_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_message_contact_page' is used in nib 'ContactusCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_contact_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_contact_page' is used in nib 'ContactusCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call_contact_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call_contact_page' is used in nib 'ContactusCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CustomPopHomeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CustomPopHomeCell
      
      let bundle = R.hostingBundle
      let identifier = "CustomPopHomeCell"
      let name = "CustomPopHomeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CustomPopHomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomPopHomeCell
      }
      
      fileprivate init() {}
    }
    
    struct _CustomPopHomeVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomPopHomeVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CustomPopMyAppointmentFeedBackVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomPopMyAppointmentFeedBackVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _CustomPopMyAppointmentVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomPopMyAppointmentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DashbaordCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DashbaordCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DashboardCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashboardCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_agenda_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_agenda_dashboard' is used in nib 'DashbaordCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditExtraDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditExtraDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'EditExtraDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditSalonDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditSalonDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "map_pin_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map_pin_blue' is used in nib 'EditSalonDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'EditSalonDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'EditSalonDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmployeeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmployeeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmployeeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmployeeCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_red' is used in nib 'EmployeeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_employee") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_employee' is used in nib 'EmployeeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'EmployeeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmployeeReportDetailCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmployeeReportDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmployeeReportDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmployeeReportDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FilterCells: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FilterCells
      
      let bundle = R.hostingBundle
      let identifier = "FilterCells"
      let name = "FilterCells"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'FilterCells', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender_gray' is used in nib 'FilterCells', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterMainCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FilterCells
      
      let bundle = R.hostingBundle
      let identifier = "FilterMainCategoryCell"
      let name = "FilterMainCategoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCells
      }
      
      fileprivate init() {}
    }
    
    struct _FilterSubCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FilterCells
      
      let bundle = R.hostingBundle
      let identifier = "FilterSubCategoryCell"
      let name = "FilterSubCategoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'FilterSubCategoryCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'FilterSubCategoryCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilterVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ForgotPasswordVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForgotPasswordVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_cancel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in nib 'ForgotPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in nib 'ForgotPasswordVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ForgotPasswordVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeCell"
      let name = "HomeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_main_category") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_main_category' is used in nib 'HomeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeHeaderCell"
      let name = "HomeHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_home_screen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_home_screen' is used in nib 'HomeHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSearchHeaderSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeSearchHeaderSubCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeSearchHeaderSubCell"
      let name = "HomeSearchHeaderSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeSearchHeaderSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSearchHeaderSubCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSearchResultSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = HomeSearchHeaderSubCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeSearchCell"
      let name = "HomeSearchResultSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeSearchHeaderSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSearchHeaderSubCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_search_salon_home_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_salon_home_page' is used in nib 'HomeSearchResultSubCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSearchVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeSearchVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_search_home_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_home_page' is used in nib 'HomeSearchVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_search_home_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_home_page' is used in nib 'HomeVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferBookCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LastMintOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LastMintOfferBookCell1"
      let name = "LastMintOfferBookCell1"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMintOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMintOfferCell
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferBookCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LastMintOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LastMintOfferBookCell2"
      let name = "LastMintOfferBookCell2"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMintOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMintOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'LastMintOfferBookCell2', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'LastMintOfferBookCell2', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferBookCell3: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LastMintOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LastMintOfferBookCell3"
      let name = "LastMintOfferBookCell3"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMintOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMintOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_radio_unselected_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_radio_unselected_blue' is used in nib 'LastMintOfferBookCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_radio_selected_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_radio_selected_blue' is used in nib 'LastMintOfferBookCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'LastMintOfferBookCell3', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'LastMintOfferBookCell3', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferBookVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LastMintOfferBookVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LastMintOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LastMintOfferCell"
      let name = "LastMintOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMintOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMintOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_listing_salon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_listing_salon' is used in nib 'LastMintOfferCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LastMintOfferCell
      
      let bundle = R.hostingBundle
      let identifier = "LastMintOfferDetailCell"
      let name = "LastMintOfferDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMintOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMintOfferCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_employee_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_employee_blue' is used in nib 'LastMintOfferDetailCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferDetailVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LastMintOfferDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LastMintOfferVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LastMintOfferVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LastMinuteOfferCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LastMinuteOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LastMinuteOfferTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastMinuteOfferTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_map") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_map' is used in nib 'LastMinuteOfferCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMinuteOfferDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LastMinuteOfferDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_dark_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_dark_gray' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_message_display") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_message_display' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'LastMinuteOfferDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LastMinuteOfferList: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LastMinuteOfferList"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LastMinuteOfferVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LastMinuteOfferVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'LastMinuteOfferVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'LastMinuteOfferVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'LastMinuteOfferVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LeftMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LeftMenuCell
      
      let bundle = R.hostingBundle
      let identifier = "LeftMenuCell"
      let name = "LeftMenuCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LeftMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftMenuCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_client_bottom_tab_selected.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_client_bottom_tab_selected.png' is used in nib 'LeftMenuCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LeftMenuVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LeftMenuVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user_placeholder_side_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder_side_menu' is used in nib 'LeftMenuVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logout_sidemenu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logout_sidemenu' is used in nib 'LeftMenuVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LoginVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in nib 'LoginVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_login_page' is used in nib 'LoginVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ManageEmployeeVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ManageEmployeeVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ManageOptionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ManageOptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ManageOptionsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageOptionsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_forward_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_forward_white' is used in nib 'ManageOptionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ManagePicturesVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ManagePicturesVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ManageProgramCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ManageProgramCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ManageProgramTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ManageProgramTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'ManageProgramCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'ManageProgramCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'ManageProgramCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ManageProgramVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ManageProgramVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ManageProgramVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ManageSalonVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ManageSalonVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ManageServiceVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ManageServiceVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MessageRecieverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MessageCells
      
      let bundle = R.hostingBundle
      let identifier = "MessageRecieverCell"
      let name = "MessageRecieverCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user_placeholder_side_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder_side_menu' is used in nib 'MessageRecieverCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageSenderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MessageCells
      
      let bundle = R.hostingBundle
      let identifier = "MessageSenderCell"
      let name = "MessageSenderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user_placeholder_side_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder_side_menu' is used in nib 'MessageSenderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MonthStatisticCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MonthStatisticCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MonthStastisticCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MonthStastisticCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyAppointmentHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyAppointmentCells
      
      let bundle = R.hostingBundle
      let identifier = "MyAppointmentHeaderCell"
      let name = "MyAppointmentHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyAppointmentCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAppointmentCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_listing_salon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_listing_salon' is used in nib 'MyAppointmentHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyAppointmentUpcomingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyAppointmentCells
      
      let bundle = R.hostingBundle
      let identifier = "MyAppointmentUpcomingCell"
      let name = "MyAppointmentUpcomingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyAppointmentCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAppointmentCells
      }
      
      fileprivate init() {}
    }
    
    struct _MyAppointmentUpcomingLastMinCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyAppointmentCells
      
      let bundle = R.hostingBundle
      let identifier = "MyAppointmentUpcomingLastMinCell"
      let name = "MyAppointmentUpcomingLastMinCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyAppointmentCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAppointmentCells
      }
      
      fileprivate init() {}
    }
    
    struct _MyAppointmentVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyAppointmentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MyFavoriteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyFavoriteCell
      
      let bundle = R.hostingBundle
      let identifier = "MyFavoriteCell"
      let name = "MyFavoriteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyFavoriteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyFavoriteCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_heart_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_selected' is used in nib 'MyFavoriteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_listing_salon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_listing_salon' is used in nib 'MyFavoriteCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart_unselected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_unselected' is used in nib 'MyFavoriteCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyFavoriteSalon: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyFavoriteSalon"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MyProfileVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyProfileVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user_placeholder_salon_member") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder_salon_member' is used in nib 'MyProfileVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NewAppointmentVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewAppointmentVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone_dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone_dark' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_dark_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_dark_gray' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_gray' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_message_display") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_message_display' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'NewAppointmentVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholder__client") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder__client' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_request_notification_screen") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_request_notification_screen' is used in nib 'NotificationCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NotificatonVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificatonVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PersonalVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PersonalVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus' is used in nib 'PersonalVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus' is used in nib 'PersonalVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_color_picker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_color_picker' is used in nib 'PersonalVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'PersonalVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewMessageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PreviewMessageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PreviewMessageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewMessageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReportDetailCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReportDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReportDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReportVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReportVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SalonBookNowSubCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonBookNowSubCell
      
      let bundle = R.hostingBundle
      let identifier = "SalonBookNowSubCell"
      let name = "SalonBookNowSubCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonBookNowSubCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonBookNowSubCell
      }
      
      fileprivate init() {}
    }
    
    struct _SalonClientList: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SalonClientList"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDashboard: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SalonDashboard"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_agenda_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_agenda_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_client_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_client_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_payment_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_report_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_report_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_dashboard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profile_dashboard' is used in nib 'SalonDashboard', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoDescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoDescriptionCell"
      let name = "SalonDetailInfoDescriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoHeaderCell"
      let name = "SalonDetailInfoHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'SalonDetailInfoHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoLocationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoLocationCell"
      let name = "SalonDetailInfoLocationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoProgramCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoProgramCell"
      let name = "SalonDetailInfoProgramCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoSocialCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoSocialCell"
      let name = "SalonDetailInfoSocialCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_youtube_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_youtube_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google_plus_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google_plus_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_instagram_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_instagram_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pintrest_plus_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pintrest_plus_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fb_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fb_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_twitter_edit_salon_details") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_twitter_edit_salon_details' is used in nib 'SalonDetailInfoSocialCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoTeamCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoTeamCell"
      let name = "SalonDetailInfoTeamCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoTeamCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SalonDetailInfoTeamCell
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoTeamCollectionCell"
      let name = "SalonDetailInfoTeamCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailInfoTeamCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailInfoTeamCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "user_placeholder_side_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_placeholder_side_menu' is used in nib 'SalonDetailInfoTeamCollectionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailInfoUtilityCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailInfoUtilityCell"
      let name = "SalonDetailInfoUtilityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailReviewCell"
      let name = "SalonDetailReviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'SalonDetailReviewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailServiceCells: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalonDetailCells
      
      let bundle = R.hostingBundle
      let identifier = "SalonDetailServiceCells"
      let name = "SalonDetailServiceCells"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonDetailCells? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonDetailCells
      }
      
      fileprivate init() {}
    }
    
    struct _SalonDetailVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SalonDetailVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_heart_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_selected' is used in nib 'SalonDetailVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart_unselected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_heart_unselected' is used in nib 'SalonDetailVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonListVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SalonListVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SalonPictureCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SalonPictureCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalonPictureCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalonPictureCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_red' is used in nib 'SalonPictureCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_employee") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_employee' is used in nib 'SalonPictureCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SalonSignupVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SalonSignupVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_login_page' is used in nib 'SalonSignupVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in nib 'SalonSignupVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in nib 'SalonSignupVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ServiceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServiceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ServiceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_red' is used in nib 'ServiceCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ServiceHeaderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServiceHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ServiceHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceHeaderTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "seprator_dotted") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'seprator_dotted' is used in nib 'ServiceHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ServiceItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServiceItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ServiceItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceItemTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_edit_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_blue' is used in nib 'ServiceItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ServicesCell
      
      let bundle = R.hostingBundle
      let identifier = "ServicesCell"
      let name = "ServicesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ServicesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkbox_select_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_select_regular' is used in nib 'ServicesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox_unselect_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox_unselect_regular' is used in nib 'ServicesCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ServicesVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SignupVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignupVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_fb_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fb_login_page' is used in nib 'SignupVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in nib 'SignupVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_login_page' is used in nib 'SignupVC', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TermsAndConditionVC: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TermsAndConditionVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TimeBookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimeBookingCell
      
      let bundle = R.hostingBundle
      let identifier = "BokingTimeSlotCell"
      let name = "TimeBookingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TimeBookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeBookingCell
      }
      
      fileprivate init() {}
    }
    
    struct _TimePickerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimePickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UtilityCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UtilityCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UtilityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UtilityTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try signup.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "splash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let loginVC = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "loginVC")
      let name = "Main"
      let settingVC = StoryboardViewControllerResource<SettingTableViewController>(identifier: "settingVC")
      
      func loginVC(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func settingVC(_: Void = ()) -> SettingTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_login_page' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_forward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_forward' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingTableViewController'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Signup"
      let signupVC = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "signupVC")
      
      func signupVC(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_login_page' is used in storyboard 'Signup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login_page") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login_page' is used in storyboard 'Signup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropdown_regular") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropdown_regular' is used in storyboard 'Signup', but couldn't be loaded.") }
        if _R.storyboard.signup().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Signup' as 'UIKit.UIViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}